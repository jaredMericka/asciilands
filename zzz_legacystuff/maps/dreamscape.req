<?php

// CAUTION!
// NEVER EDIT A REQ FILE!

class obj_portal extends AsObject

{
	public function __construct($name, $spriteSet, $n_offset, $w_offset, $teleport_n_offset, $teleport_w_offset, $teleport_map = null)
	{
		$this->behaviours[] = new obhv_teleporter($teleport_n_offset, $teleport_w_offset, $teleport_map);

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, LAYER_PORTAL);
	}
}



class obhv_teleporter extends ObjectBehaviour
{
	public function __construct($n_offset, $w_offset, $map = null)
	{
		$this->onReaction = true;

		$description = "Teleports to {$n_offset}:{$w_offset}"
		. ($map ? " - {$map}." : '.');

		$this->n_offset	= $n_offset;
		$this->w_offset	= $w_offset;
		$this->map		= $map;

		parent::__construct($description, BHVK_TELEPORT, 0);
	}

	public function onReaction(AsObject $instigator)
	{
		parent::onReaction($instigator);
		global $view;
		global $player;

		if ($instigator instanceof Player)
        {
            console_echo("Entering the {$this->owner->name} portal!");		//XXX

            $instigator->n_offset = $this->n_offset;
            $instigator->w_offset = $this->w_offset;

            if (isset($this->map) && $this->map != $player->map)
            {
				$player->changeMap($this->map);
//                $player->map = $this->map;
//                EXIT(AJAX_REFRESH);
            }
            else
            {
                $player->lastMoved = $_SERVER['REQUEST_TIME_FLOAT']; // To prevent a quick double-move since we're not triggering the actual move event but forcing a refresh.
                console_update_location();
            }

            $view->forceUpdate = true;
            return false;
        }
	}
}

class obj_collectible extends AsObject

{
	protected $unique = true;

    public function __construct($item, $n_offset, $w_offset)
    {
		if ($this->unique && $GLOBALS['player']->hasItem($item))
		{
			// code for removing duplicate unique items
		}

		$this->behaviours[] = new obhv_collectible($item);

        parent::__construct($item->name, [$item->sprite], $n_offset, $w_offset, LAYER_COLLECTIBLE);
    }
}




class obhv_collectible extends ObjectBehaviour
{
	public $item;

	public function __construct(Item $item)
	{
		$name	= "Collect {$item->name}.";
		$this->item = $item;

		$this->onReaction = true;

		parent::__construct($name, BHVK_PRIMARY);
	}

	public function onReaction(AsObject $instigator)
	{
		if ($instigator instanceof Dude)
		{
			$instigator->inventory->add($this->item);
			$this->owner->destroy();
		}
		$this->owner->permitEntry = true;
		parent::onReaction($instigator);
	}
}
class obj_sign extends AsObject

{
	public function __construct($name, $spriteSet, $n_offset, $w_offset, $text, $bg = null, $fg = null, $forcedHeight = null)
	{
		$this->behaviours[] = new obhv_showText($name, $text, $bg, $fg, $forcedHeight);

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, LAYER_SIGN);
	}
}



class obhv_showText extends ObjectBehaviour
{
	public $title;
	public $text;

	public $bg;
	public $fg;

	public $forcedHeight;

	public function __construct($title, $text, $bg = null, $fg = null, $forcedHeight = null)
	{
		$this->onEngage = true;
		$this->onDisengage = true;

		$this->title = $title;
		$this->text = $text;

		$this->bg = ($bg ? $bg : '#ffd');
		$this->fg = ($fg ? $fg : '#000');

		$this->forcedHeight = $forcedHeight;

		$description = "Show {$title} text.";

		parent::__construct($description, BHVK_SHOWTEXT);
	}

	public function onEngage(Player $player)
	{
		update_text($this->title, $this->text, $this->bg, $this->fg, $this->forcedHeight);
	}

	public function onDisengage(Player $player)
	{
		console_echo('Clearing sign on disengage.', '#aff');		//XXX
		clearPanel(UPD_TEXT);
	}
}