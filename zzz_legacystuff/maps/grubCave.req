<?php

// CAUTION!
// NEVER EDIT A REQ FILE!


class dude_basicEnemy extends Dude
{
	public function __construct($name, $spriteSet, $n_offset, $w_offset, $dudeStats = null)
	{
		$this->behaviours[] = new obhv_chase($GLOBALS['player'], 1);
		$this->behaviours[] = new dbhv_leaveLootableCorpse($spriteSet);

		$this->FAC		= FAC_MONSTER;
		$this->canPush	= false;

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, null, null, $dudeStats);
	}
}



class obhv_chase extends ObjectBehaviour
{
	public $direction;
	public $repeats = 0;
	public $chase;
	public $target;
	public static $directions = [DIR_NORTH, DIR_SOUTH, DIR_EAST, DIR_WEST];
	public $failedDirections = [];
	public $pauseOnTouch;
	public $personalSpace;

	public function __construct(AsObject $target, $coolDown = null, $pauseOnTouch = 1, $personalSpace = null)
	{
		$this->onIdle		= true;
		$this->onCollision	= true;
		$this->onRegister	= true;

		$this->target		= $target;
		if (!$coolDown)	$coolDown = 1;
		$coolDown			= ($coolDown >= 0.2 ? $coolDown : 0.2);
		$this->pauseOnTouch	= $pauseOnTouch;
		// If this is extended, it must be obhv_flee.
		$this->chase = get_class($this) === get_class();

		$description = ($this->chase ? 'Chases' : 'Flees') . " {$target->name} at ". 1 / $coolDown .' RPS.'; // This will always say "chase"

		$this->personalSpace = $personalSpace;

		parent::__construct($description, BHVK_MOVEMENT, $coolDown);
	}

	public function onRegister()
	{
		if ($this->owner->speed_fast)
		{
			console_echo("{$this->owner->name} has had the speed of its chase behaviour over-ridden.", '#f00');
			$this->coolDown = $this->owner->speed_fast;
		}
		else if ($this->owner->speed)
		{
			console_echo("{$this->owner->name} has had the speed of its chase behaviour over-ridden.", '#f00');
			$this->coolDown = $this->owner->speed;
		}
		else {console_echo("{$this->owner->name} hasn't had its speed over-ridden.", '#f00');}
	}

	public function onCollision(AsObject $receiver)
	{
		if ($receiver == $this->target)
		{
			$this->extendCooldown($this->pauseOnTouch);
		}
	}

	public function onIdle()
	{
		if ($this->chase && $this->personalSpace)
		{
			console_echo("{$this->owner->name} is considering {$this->target->name}'s personal space. ({$this->personalSpace})", '#ccc');
			if ($this->owner->distanceFrom($this->target) <= $this->personalSpace)
			{
				console_echo("{$this->owner->name} is respecting {$this->target->name}'s personal space.", '#fff');
				return;
			}
			console_echo("{$this->owner->name} is disregarding {$this->target->name}'s personal space.", '#ccc');
		}

		if ($this->owner->n_offset > $this->target->n_offset)
		{
			$this->direction = ($this->chase ? DIR_NORTH : DIR_SOUTH);
		}
		elseif ($this->owner->n_offset < $this->target->n_offset)
		{
			$this->direction = ($this->chase ? DIR_SOUTH : DIR_NORTH);
		}
		else
		{
			$this->direction = null;
		}

		if (!isset($this->direction)
			|| in_array($this->direction, $this->failedDirections)
			|| mt_rand(0,1))
		{

			if ($this->owner->w_offset > $this->target->w_offset)
			{
				$this->direction = ($this->chase ? DIR_WEST : DIR_EAST);
			}
			elseif ($this->owner->w_offset < $this->target->w_offset)
			{
				$this->direction = ($this->chase ? DIR_EAST : DIR_WEST);
			}
		}

		if (in_array($this->direction, $this->failedDirections))
		{
			$otherDirections = array_diff(self::$directions, $this->failedDirections);
			if (count($otherDirections) === 0)
			{
				$this->failedDirections = [];
				$this->direction = mt_rand(0, 3);
			}
			else
			{
				$this->direction = $otherDirections[array_rand($otherDirections)];
			}
		}

		if (isset($this->direction))
		{
			// We have our direction? Good. Try to move in that direction.
			if ($this->owner->moveInDirection($this->direction))
			{
				// Alright, we're here now. Decrement the repeates and hit the
				// cool-down timer thing.
				// $this->triggerCooldown();
				$this->failedDirections = [];
			}
			else
			{
				// Ok, that didn't work and we don't want to try again. Add
				// the direction we just moved to the list of unmovable
				// directions.
				// We still have to trigger the cooldown in case they activated
				// something with the collision EVEN THOUGH they didn't move.
				// $this->triggerCooldown();
				$this->failedDirections[] = $this->direction;
			}
		}
	}
}

class dbhv_leaveLootableCorpse extends DudeBehaviour
{
	function __construct($spriteSet)
	{
		$this->onDeath = true;

		if (isset($spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $spriteSet[SPRI_CORPSE];
		}
		else
		{
			$this->spriteSet[SPRI_CORPSE] = spr_personCorpse($spriteSet[SPRI_DEFAULT]);
		}

		$description  = 'Leaves a lootable corpse.';
		parent::__construct($description, BHVK_CORPSE, 1);
	}

	function onDeath(Attack $attack)
	{
		global $map;
		
		console_echo("Leaving corpse of {$this->owner->name}", '#faf');

		if (isset($this->owner->spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $this->owner->spriteSet[SPRI_CORPSE];
		}

		$obj_corpse = new obj_corpse(
			"Corpse of {$this->owner->name}",
			[$this->spriteSet[SPRI_CORPSE]],
			$this->owner->n_offset,
			$this->owner->w_offset,
			$this->owner->inventory->contents);

		if (isset($map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE]))
		{
			$existingObject = $map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE];

			$obj_corpse->inventory->locked = false;
			if (isset($existingObject->item))
			{
				$obj_corpse->inventory->add($existingObject->item);
			}
			elseif (isset($existingObject->inventory))
			{
				$existingObject->inventory->locked = false;

				foreach ($existingObject->inventory->contents as $item)
				{
					$obj_corpse->inventory->add($existingObject->inventory->pullItem($item));
				}

				$existingObject->inventory->locked = true;
			}
			$obj_corpse->inventory->locked = true;
		}

		$this->owner->changeTo($obj_corpse);
	}


}