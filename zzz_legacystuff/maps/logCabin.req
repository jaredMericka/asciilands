<?php

// CAUTION!
// NEVER EDIT A REQ FILE!


class dude_NPC_vendor extends a_dude_NPC
{
	public $CUR;

	public function __construct($name, $spriteSet, $n_offset, $w_offset, $gender = GND_MALE, $speechFile = null, $wares = [], $CUR = null)
	{
		$this->FAC = FAC_NPC_NEUTRAL;

		$this->CUR = isset($CUR) ? $CUR : CUR_GOLD;

		$this->behaviours[] = new obhv_lootable();
		$this->behaviours[] = new dbhv_speak();

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, $gender, $speechFile);

		global $currencies; //XXX

		console_echo("{$this->name} deals in {$currencies[$this->CUR]->name}");

		$this->inventory->CUR = $this->CUR;
		foreach ($wares as $thing)
		{
			$this->inventory->add($thing);
		}
	}
}

//if (!is_callable('spr_personCorpse')) require "{$GLOBALS['roothPath']}content/sprites/people.fac";

abstract class a_dude_NPC extends Dude
{
	function __construct($name, $spriteSet, $n_offset, $w_offset, $gender = null, $speechFile = null)
	{
		$this->FAC			= FAC_NPC_NEUTRAL;

		if (!isset($spriteSet[SPRI_DEFAULT]))
		{
			$spriteSet[SPRI_DEFAULT] = spr_person_rand($gender);
		}

		$this->behaviours[] = new dbhv_leaveLootableCorpse($spriteSet);
		$this->behaviours[] = new dbhv_fleeWhenAttacked(10);
		//$this->behaviours[] = new dbhv_speak();

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, $gender, $speechFile);
	}
}

class obhv_lootable extends ObjectBehaviour
{
	public $keyItem;

	public function __construct(Item $keyItem = null, $spriteSet = null)
	{
		$this->onEngage	= true;
		$this->onDisengage	= true;
		$this->onRegister = true;

		$this->keyItem = $keyItem;

		if (isset($spriteSet) && isset($spriteSet[SPRI_OPEN]))
		{
			$this->spriteSet[SPRI_OPEN] = $spriteSet[SPRI_OPEN];
			$this->spriteSet[SPRI_CLOSED] = $spriteSet[SPRI_CLOSED];
		}


		$description = 'Allows access to inventory while engaged.';

		parent::__construct($description, BHVK_PRIMARY);
	}

	public function onRegister()
	{
		$this->owner->inventory->lootable = true;
	}

	public function onEngage(Player $player)
	{
		if (!isset($this->keyItem) || $player->hasItem($this->keyItem) !== false || $this->owner->inventory->findItem($this->keyItem) !== false)
		{
			$this->owner->inventory->locked = false;

			update_available();

			if (isset($this->owner->inventory->CUR))
			{
				update_items();
				$player->inventory->CUR = $this->owner->inventory->CUR;
			}

			if (isset($this->spriteSet[SPRI_OPEN]))
			{
				$this->owner->sprite = $this->spriteSet[SPRI_OPEN];
			}
		}
		else
		{
			update_thoughts("I'll need a {$this->keyItem->name} to open this {$this->owner->name};");
		}
	}

	public function onDisengage(Player $player)
	{
		$this->owner->inventory->locked = true;

		clearPanel(UPD_AVAILABLE);
		if (isset($this->owner->inventory->CUR))
		{
			update_items(true);
			$player->inventory->CUR = null;
		}

		if (isset($this->spriteSet[SPRI_CLOSED]))
		{
			$this->owner->sprite = $this->owner->spriteSet[SPRI_CLOSED];
		}
	}
}

class dbhv_speak extends DudeBehaviour
{

	static $oddsOfCombatSpeech = 50;

	public function __construct($SPSIs_exceptions = null)
	{
		if (!isset($SPSIs_exceptions)) $SPSIs_exceptions = [];

		$this->onReaction	= in_array(SPSI_CONVERSING,	$SPSIs_exceptions) === false;
		$this->onEngage		= in_array(SPSI_GREETING,	$SPSIs_exceptions) === false;
		$this->onDisengage	= in_array(SPSI_SAYING_BYE,	$SPSIs_exceptions) === false;

		$this->onAttack		= in_array(SPSI_ATTACKING,	$SPSIs_exceptions) === false;
		$this->onMiss		= in_array(SPSI_MISSING,	$SPSIs_exceptions) === false;
		$this->onStrike		= in_array(SPSI_STRIKING,	$SPSIs_exceptions) === false;
		$this->onKill		= in_array(SPSI_KILLING,	$SPSIs_exceptions) === false;

		$this->onDefend		= in_array(SPSI_DEFENDING,	$SPSIs_exceptions) === false;
		$this->onDeflect	= in_array(SPSI_DEFLECTING,	$SPSIs_exceptions) === false;
		$this->onTakeHit	= in_array(SPSI_TAKING_HIT,	$SPSIs_exceptions) === false;
		$this->onDeath		= in_array(SPSI_DYING,		$SPSIs_exceptions) === false;

		$description = "Greets, converses and dismisses when interacted with.";

		parent::__construct($description, BHVK_SPEAK);
	}

	public function onEngage(Player $player)
	{
		$this->owner->speak(SPSI_GREETING, null, true);
	}

	public function onDisengage(Player $player)
	{
		$this->owner->speak(SPSI_SAYING_BYE, null, true);
	}

	public function onReaction(AsObject $instigator)
	{
		if ($instigator instanceof Player) $this->owner->speak(SPSI_CONVERSING);
	}


	public function onAttack(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_ATTACKING, $attack);
	}

	public function onMiss(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_MISSING, $attack);
	}

	public function onStrike(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_STRIKING, $attack);
	}

	public function onKill(Attack $attack)
	{
		$this->owner->speak(SPSI_KILLING, $attack);
	}

	public function onDefend(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_DEFENDING, $attack);
	}

	public function onDeflect(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_DEFLECTING, $attack);
	}

	public function onTakeHit(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_TAKING_HIT, $attack);
	}

	public function onDeath(Attack $attack)
	{
		$this->owner->speak(SPSI_DYING, $attack);
	}
}

class dbhv_leaveLootableCorpse extends DudeBehaviour
{
	function __construct($spriteSet)
	{
		$this->onDeath = true;

		if (isset($spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $spriteSet[SPRI_CORPSE];
		}
		else
		{
			$this->spriteSet[SPRI_CORPSE] = spr_personCorpse($spriteSet[SPRI_DEFAULT]);
		}

		$description  = 'Leaves a lootable corpse.';
		parent::__construct($description, BHVK_CORPSE, 1);
	}

	function onDeath(Attack $attack)
	{
		global $map;
		
		console_echo("Leaving corpse of {$this->owner->name}", '#faf');

		if (isset($this->owner->spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $this->owner->spriteSet[SPRI_CORPSE];
		}

		$obj_corpse = new obj_corpse(
			"Corpse of {$this->owner->name}",
			[$this->spriteSet[SPRI_CORPSE]],
			$this->owner->n_offset,
			$this->owner->w_offset,
			$this->owner->inventory->contents);

		if (isset($map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE]))
		{
			$existingObject = $map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE];

			$obj_corpse->inventory->locked = false;
			if (isset($existingObject->item))
			{
				$obj_corpse->inventory->add($existingObject->item);
			}
			elseif (isset($existingObject->inventory))
			{
				$existingObject->inventory->locked = false;

				foreach ($existingObject->inventory->contents as $item)
				{
					$obj_corpse->inventory->add($existingObject->inventory->pullItem($item));
				}

				$existingObject->inventory->locked = true;
			}
			$obj_corpse->inventory->locked = true;
		}

		$this->owner->changeTo($obj_corpse);
	}


}

class dbhv_fleeWhenAttacked extends DudeBehaviour
{
	public $oldMovement = null;

	public $safeDistance;
	public $target;
	public $fleeCoolDown;

	function __construct($safeDistance = 20, $fleeCoolDown = 0.4)
	{
		$this->onDefend = true;
		$this->onIdle = true;

		$description = 'Flees when attacked.';
		$this->safeDistance = $safeDistance;
		$this->fleeCoolDown = $fleeCoolDown;

		parent::__construct($description, 'flee');
	}

	function onDefend(Attack $attack)
	{
		if (!$attack->isBaseAttack) return;

		if (isset($this->owner->behaviours[BHVK_MOVEMENT]) && !($this->owner->behaviours[BHVK_MOVEMENT] instanceof obhv_flee))
			$this->oldMovement = $this->owner->behaviours[BHVK_MOVEMENT];

		$this->target = $attack->attacker;
		console_echo("{$this->owner->name} is fleeing {$this->target->name}.");
		$this->owner->addBehaviour(new obhv_flee($attack->attacker, $this->fleeCoolDown));

	}

	function onIdle()
	{
		if (isset($this->target) && $this->owner->distanceFrom($this->target) > $this->safeDistance)
		{
			console_echo("{$this->owner->name} is no longer fleeing {$this->target->name}.");

			if (isset($this->oldMovement))
			{
				$this->owner->addBehaviour($this->oldMovement);
			}
			else
			{
				unset($this->owner->behaviours[BHVK_MOVEMENT]);
			}

			unset($this->target);
		}
	}
}

class obhv_wander extends ObjectBehaviour
{
	public $direction;
	public $repeats = 0;

	public static $DIRs = [DIR_NORTH, DIR_SOUTH, DIR_WEST, DIR_EAST];

	public function __construct($coolDown = 1)
	{
		$this->onIdle		= true;
		$this->onRegister	= true;

		$description = 'Wanders around randomly.';
		$coolDown		= ($coolDown >= 0.2 ? $coolDown : 0.2);

		parent::__construct($description, BHVK_MOVEMENT, $coolDown);
	}

	public function onRegister()
	{
		if (isset($this->owner->speed))
		{
			console_echo("{$this->owner->name} has had the speed of its wander behaviour over-ridden.", '#f00');
			$this->coolDown = $this->owner->speed;
		}
		else {console_echo("{$this->owner->name} hasn't had its speed over-ridden.", '#f00');}
	}

	public function onIdle()
	{
		if ($this->owner->engagement !== null) return;

		// Do we know where we're going? If we have nothing to repeat, better
		// find out where to go.
		if ($this->repeats <= 0)
		{
			// We're wandering so it's random. Thank shit we're not chasing
			// anyone.
			$this->direction = self::$DIRs[array_rand(self::$DIRs)];
			$this->repeats = mt_rand(0,6);
		}

		if (isset($this->direction))
		{
			// We have our direction? Good. Try to move in that direction.
			if ($this->owner->moveInDirection($this->direction))
			{
				// Alright, we're here now. Decrement the repeates and hit the
				// cool-down timer thing.
				$this->repeats--;
				// $this->triggerCooldown();
			}
			else
			{
				// Ok, that didn't work and we don't want to try again. Clear
				// remaining repeats to we can get some fresh instructions
				// in here.
				$this->repeats = 0;
			}
		}
	}
}
class obj_portal extends AsObject
{
	public function __construct($name, $spriteSet, $n_offset, $w_offset, $teleport_n_offset, $teleport_w_offset, $teleport_map = null)
	{
		$this->behaviours[] = new obhv_teleporter($teleport_n_offset, $teleport_w_offset, $teleport_map);

		parent::__construct($name, $spriteSet, $n_offset, $w_offset, LAYER_PORTAL);
	}
}



class obhv_teleporter extends ObjectBehaviour
{
	public function __construct($n_offset, $w_offset, $map = null)
	{
		$this->onReaction = true;

		$description = "Teleports to {$n_offset}:{$w_offset}"
		. ($map ? " - {$map}." : '.');

		$this->n_offset	= $n_offset;
		$this->w_offset	= $w_offset;
		$this->map		= $map;

		parent::__construct($description, BHVK_TELEPORT, 0);
	}

	public function onReaction(AsObject $instigator)
	{
		parent::onReaction($instigator);
		global $view;
		global $player;

		if ($instigator instanceof Player)
        {
            console_echo("Entering the {$this->owner->name} portal!");		//XXX

            $instigator->n_offset = $this->n_offset;
            $instigator->w_offset = $this->w_offset;

            if (isset($this->map) && $this->map != $player->map)
            {
				$player->changeMap($this->map);
//                $player->map = $this->map;
//                EXIT(AJAX_REFRESH);
            }
            else
            {
                $player->lastMoved = $_SERVER['REQUEST_TIME_FLOAT']; // To prevent a quick double-move since we're not triggering the actual move event but forcing a refresh.
                console_update_location();
            }

            $view->forceUpdate = true;
            return false;
        }
	}
}