<?php

// CAUTION!
// NEVER EDIT A REQ FILE!


class set_wood extends AssetSet
{
	public $colour;

	const TINT_LIGHT	= 1;
	const TINT_DARK		= -2;
	const TINT_DARKER	= -3;

	public function __construct($colour = null)
	{
		$this->colour = $colour ? $colour : '#960';
	}

	public function sprs_doubleDoors ($col_panel = null, $col_handle = null, $col_gap = null)
	{
		$col_panel = $this->getColour($this->colour, $col_panel);
		$col_handle = $col_handle ? $col_handle : '#ddd';
		$col_handle = $col_gap ? $col_gap : tint($col_panel, 2);

		$slm_doubleDoorPanel	= new SpriteElement($col_panel, null, '&nbsp;');
		$slm_doubleDoorGap		= new SpriteElement($col_panel, $col_gap, '&#x2502;');
		$slm_doubleDoorHandle	= new SpriteElement($col_panel, $col_handle, '&bull;');

		$slm_doubleDoorOpenLeft	= new SpriteElement(null, $col_panel, '&#x258C');
		$slm_doubleDoorOpenRight	= new SpriteElement(null, $col_panel, '&#x2590');

		$spr_closed = new Sprite([
			0 => $slm_doubleDoorPanel,
			1 => $slm_doubleDoorGap,
			2 => $slm_doubleDoorPanel,

			3 => $slm_doubleDoorHandle,
			4 => $slm_doubleDoorGap,
			5 => $slm_doubleDoorHandle
		]);

		$spr_open = new Sprite([
			0 => $slm_doubleDoorOpenLeft,
			2 => $slm_doubleDoorOpenRight,
			3 => $slm_doubleDoorOpenLeft,
			5 => $slm_doubleDoorOpenRight
		]);

		return [
			SPRI_CLOSED => $spr_closed,
			SPRI_OPEN => $spr_open
		];

	}

	function t_planks ($colour = null)
	{
		$colour		= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Tile($colour, array('&#x0251C;', '&#x02524;', '&#x02502;', '&#x02502;', '&#x0251C;', '&#x02524;'), TPL_OPENGROUND, $col_dark);
	}

	function t_stairs ($colour = null)
	{
		$colour		= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_OPENGROUND, $col_dark);
	}

	function scn_planksSide ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$colour	= tint($colour, self::TINT_DARK);

		$slm = new SpriteElement(null, $colour, '&#x2580;');

		return new Scenery(new Sprite([
			0 => $slm,
			1 => $slm,
			2 => $slm,
		]));
	}

	function scn_planksSide_post ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		$slm = new SpriteElement(null, $col_dark, '&#x2580;');

		return new Scenery(new Sprite([
			0 => $slm,
			1 => new SpriteElement($col_dark, null, '&nbsp;'),
			2 => $slm,
			4 => new SpriteElement($colour, $col_dark, '&#x02590;'),
		]), TPL_VERTICAL);
	}

	function scn_post ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			1 => new SpriteElement($colour, $col_dark, '&#x02590;'),
			4 => new SpriteElement($colour, $col_dark, '&#x02590;'),
		]), TPL_VERTICAL);
	}

	function scn_railing ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$colour	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2580;'),
			4 => new SpriteElement($colour,  null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_fence ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$col_dark, '&#x2584;'),
			1 => new SpriteElement($colour, $col_dark, '&#x2590;'),
			2 => new SpriteElement(null,$col_dark, '&#x2584;'),
			3 => new SpriteElement(null,$col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2590;'),
			5 => new SpriteElement(null,$col_dark, '&#x2584;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_crate ($col_top = null)
	{
		$col_top	= $this->getColour($this->colour, $col_top);
		$col_front	= tint($col_top, self::TINT_DARK);

		$col_top_dark	= tint($col_top, -1);
		$col_front_dark	= tint($col_front, -1);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null,$col_top, '&#x2590;'),
				1 => new SpriteElement($col_top, $col_top_dark, '&#x039e;'),
				2 => new SpriteElement(null,$col_top, '&#x258c;'),
				3 => new SpriteElement(null,$col_front, '&#x2590;'),
				4 => new SpriteElement($col_front, $col_front_dark, '&#x2044;'),
				5 => new SpriteElement(null,$col_front, '&#x258c;'),
			],
		]), TPL_HIGHOBSTACLE);
	}

//	function createWoodAssets($name, $colour)
//	{
//		$colour_light = tint($colour, 1, true);
//		$colour_dark = tint($colour, -2, true);
//		$colour_vDark = tint($colour, -3, true);
//
//		$slm_post = new SpriteElement($colour, $colour_dark, '&#x02590;');
//		$slm_bridgeSide = new SpriteElement(null, $colour_dark, '&#x2580;');
//
//		$spr_planksSide = new Sprite([
//			$slm_bridgeSide, $slm_bridgeSide, $slm_bridgeSide
//		]);
//

//
//
//		return [
//			"t_{$name}_planks" => new Tile($colour_light, array('&#x0251C;', '&#x02524;', '&#x02502;', '&#x02502;', '&#x0251C;', '&#x02524;'), TPL_OPENGROUND, -2),
//
//			"t_{$name}_logWall" => new Tile($colour, ['&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;'], TPL_VERTICAL, 1),
//			"t_{$name}_logFloor" => new Tile($colour_light, ['&#x251c;', '&#x2524;', '&#x2502;', '&#x2524;', '&#x251c;', '&#x253c;'], TPL_OPENGROUND, -1),
//
//			"t_{$name}_wallTop_h" => new Tile($colour_vDark, ['&#x2580;', '&#x2580;', '&#x2580;', '&#x2584;', '&#x2584;', '&#x2584;'], TPL_HIGHOBSTACLE, 1),
//			"t_{$name}_wallTop_v" => new Tile($colour_vDark, ['&#x258c;', '&nbsp;', '&#x2590;', '&#x258c;', '&nbsp;', '&#x2590;'], TPL_HIGHOBSTACLE, 1),
//			"t_{$name}_wallTop_x" => new Tile($colour_vDark, ['/', '&OverBar;', '&#x005c;', '&#x005c;', '_', '/'], TPL_HIGHOBSTACLE, 1),
//
//			"t_{$name}_wickerRoof_l" => new Tile($colour, ['/', '/', '/', '/', '/', '/'], TPL_HIGHOBSTACLE),
//			"t_{$name}_wickerRoof_m" => new Tile($colour, ['|', '|', '|', '|', '|', '|'], TPL_HIGHOBSTACLE),
//			"t_{$name}_wickerRoof_r" => new Tile($colour, ['\\', '\\', '\\', '\\', '\\', '\\'], TPL_HIGHOBSTACLE),
//
//			"t_{$name}_tileRoof" => new Tile($colour, ['U', 'U', 'U', 'U', 'U', 'U'], TPL_HIGHOBSTACLE, -2),
//
//		];
//	}

}

class set_common extends AssetSet
{
	public function t_solid ($colour, $TPL = null)
	{
		$TPL = $TPL ? $TPL : TPL_LOWOBSTACLE;

		return new Tile($colour, ['&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;'], $TPL, $colour);
	}

	public function t_stairs ($col_top, $col_front = null)
	{
		$col_front = $col_front ? $col_front : tint($col_top, -3);

		return new Tile($col_top, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_STAIRS, $col_front);
	}

	public function scn_archDoor ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_half,
			1 => $slm_full,
			2 => $slm_half,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_l ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_half,
			1 => $slm_full,
			2 => $slm_full,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_r ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_full,
			1 => $slm_full,
			2 => $slm_half,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_half ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2584;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2584;'),
		]));
	}

	public function scn_archDoor_half_l ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2584;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]));
	}

	public function scn_archDoor_half_r ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement($colour, null, '&nbsp;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2584;'),
		]));
	}

	public function scn_fade_up_t ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2591;'),
			1 => new SpriteElement(null,$colour, '&#x2591;'),
			2 => new SpriteElement(null,$colour, '&#x2591;'),
			3 => new SpriteElement(null,$colour, '&#x2592;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2592;'),
		]), null, true);
	}

	public function scn_fade_up_b ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2593;'),
			1 => new SpriteElement(null,$colour, '&#x2593;'),
			2 => new SpriteElement(null,$colour, '&#x2593;'),
			3 => new SpriteElement($colour,  null, '&nbsp;'),
			4 => new SpriteElement($colour,  null, '&nbsp;'),
			5 => new SpriteElement($colour,  null, '&nbsp;'),
		]), null, true);
	}

	public function scn_fade_down_t ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement($colour,  null, '&nbsp;'),
			1 => new SpriteElement($colour,  null, '&nbsp;'),
			2 => new SpriteElement($colour,  null, '&nbsp;'),
			3 => new SpriteElement(null,$colour, '&#x2593;'),
			4 => new SpriteElement(null,$colour, '&#x2593;'),
			5 => new SpriteElement(null,$colour, '&#x2593;'),
		]), null, true);
	}

	public function scn_fade_down_b ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2592;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2592;'),
			3 => new SpriteElement(null,$colour, '&#x2591;'),
			4 => new SpriteElement(null,$colour, '&#x2591;'),
			5 => new SpriteElement(null,$colour, '&#x2591;'),
		]), null, true);
	}

	public function scn_fade_right ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2591;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2593;'),
			3 => new SpriteElement(null,$colour, '&#x2591;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2593;'),
		]), null, true);
	}

	public function scn_fade_left ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2593;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2591;'),
			3 => new SpriteElement(null,$colour, '&#x2593;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2591;'),
		]), null, true);
	}
}



class set_masonry extends AssetSet
{
	public $colour;

	const TINT_TOP				= 3;
	const TINT_PAVERS			= 3;
	const TINT_PAVERS_SIDE		= 0;
//	const TINT_PAVERS			= 5;
//	const TINT_PAVERS_SIDE		= 2;
	const TINT_DARK				= -2;
	const TINT_VOID				= -5;

	const COL_DREAMSCAPE		= '#737';
	const COL_REDBRICK			= '#832';
	const COL_DIRT				= '#972';

	public function __construct($colour = null)
	{
		$this->colour = $this->getColour('#654', $colour);
	}

	function t_bigWall ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['_', 'I', '_', 'L', '_', '_'], TPL_VERTICAL);
	}

	function t_bigWall_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['L', '_', '_', '_', 'I', '_'], TPL_HIGHOBSTACLE);
	}

	function t_bigWall_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['L', '_', '_', '_', 'I', '_'], TPL_HIGHOBSTACLE);
	}

	function t_smallWall ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_smallWall_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_smallWall_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_pavers ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_PAVERS);
		return new Tile($colour, ['L', '_', 'L', 'L', 'L', '_'], TPL_OPENGROUND, -1);
	}

	function t_stairs ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour_top = tint($colour, self::TINT_PAVERS);
		return new Tile($colour_top, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_OPENGROUND, $colour);
	}

	function t_stonyFloor ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['O','(',')','(',')','O'], TPL_OPENGROUND, -1);
	}

	function t_cliff ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['&nbsp;','_','/','/','&#x005c;','&nbsp;'], TPL_VERTICAL);
	}

	function t_cliff_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['/','&nbsp;','&nbsp;','&nbsp;', '_', '/'], TPL_OPENGROUND);
	}

	function t_cliff_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['/','&#x005c;','&nbsp;','&#x005c;','&nbsp;','&nbsp;'], TPL_WALL);
	}

	function t_cairn_w ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2588;','&nbsp;','&nbsp;','&#x258c;', '&nbsp;', '&nbsp;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_cairn ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&nbsp;','&nbsp;','&nbsp;','&nbsp;', '&nbsp;', '&nbsp;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_cairn_s ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&nbsp;','&nbsp;','&nbsp;','&#x2584;', '&#x2588;', '&#x2588;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_tiles ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);


		return new Tile($colour, ['&#x2588;','&#x258c;','&nbsp;','&nbsp;', '&#x2590;', '&#x2588;'], TPL_OPENGROUND, -1);
	}

	function spr_brick ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);
		$col_top = tint($colour, self::TINT_TOP);

		return new Sprite([
			new SpriteElement($col_top, $col_dark, 'L'),
			new SpriteElement($col_top, $col_dark, '_'),
			new SpriteElement($col_top, $col_dark, '_'),
			new SpriteElement($colour, $col_top, 'L'),
			new SpriteElement($colour, $col_top, '_'),
			new SpriteElement($colour, $col_top, '_')
		]);
	}

	function scn_paverSide ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_PAVERS_SIDE);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $colour, '&#x2580;'),
			1 => new SpriteElement(null, $colour, '&#x2580;'),
			2 => new SpriteElement(null, $colour, '&#x2580;'),
		]));
	}

	function scn_rock ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2590;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, null, '&nbsp;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_rock_sign ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2590;'),
			1 => new SpriteElement($colour, $col_dark, '&#x2261;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, null, '&nbsp;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_tl ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			1 => new SpriteElement(null, $col_dark, '&#x2590;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x258c;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_bl ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_dark, null, '&nbsp;'),
			1 => new SpriteElement($col_dark, $col_dark, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2580;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement($col_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_tr ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($colour, null, '&nbsp;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_br ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement(null, $col_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_cairn_l ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2584;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2580;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement($col_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_cairn_r ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, $colour, '&nbsp;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement(null, $col_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_crack_t ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);

		return new Scenery(new Sprite([
			[
				1 => new SpriteElement(null, $colour, '&#x258c;'),
				4 => new SpriteElement($colour, null, '&nbsp;'),
			],
		]));
	}

	function scn_crack_b ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null, $colour, '&#x2590;'),
				1 => new SpriteElement($colour, null, '&nbsp;'),
				2 => new SpriteElement(null, $colour, '&#x258c;'),
				3 => new SpriteElement($colour, null, '&nbsp;'),
				4 => new SpriteElement($colour, null, '&nbsp;'),
				5 => new SpriteElement(null, $colour, '&#x258c;'),
			],
		]));
	}
}


class set_rug extends AssetSet
{
	public $col_rug;
	public $col_trim;
	public $col_detail;

	public function __construct($col_rug = null, $col_trim = null, $col_detail = null)
	{
		$this->col_rug		= $col_rug		? $col_rug		: '#99e';
		$this->col_detail	= $col_detail	? $col_detail	: tint($col_rug, -3);
		$this->col_trim		= $col_trim		? $col_trim		: '#ffc';
	}

	public function scn_trim_l ($col_trim = null)
	{
		$col_trim = $this->getColour($this->col_trim, $col_trim);
		$col_trim_dark = tint($col_trim, -6);

		return new Scenery(new Sprite([
			2 => new SpriteElement($col_trim, $col_trim_dark, '&#x039e;'),
			5 => new SpriteElement($col_trim, $col_trim_dark, '&#x039e;'),
		]));
	}

	public function scn_trim_r ($col_trim = null)
	{
		$col_trim = $this->getColour($this->col_trim, $col_trim);
		$col_trim_dark = tint($col_trim, -6);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_trim, $col_trim_dark, '&#x039e;'),
			3 => new SpriteElement($col_trim, $col_trim_dark, '&#x039e;'),
		]));
	}

	public function t_triangles_t ($col_rug = null, $col_detail = null)
	{
		$col_rug = $this->getColour($this->col_rug, $col_rug);
		$col_detail = $this->getColour($this->col_detail, $col_detail);

		return new Tile($col_rug, ['&#x2550;', '&#x2550;', '&#x2550;', '&#x25b2;', '&#x25b2;', '&#x25b2;'], true, $col_detail);

	}

	public function t_triangles_b ($col_rug = null, $col_detail = null)
	{
		$col_rug = $this->getColour($this->col_rug, $col_rug);
		$col_detail = $this->getColour($this->col_detail, $col_detail);

		return new Tile($col_rug, ['&#x25bc;', '&#x25bc;', '&#x25bc;', '&#x2550;', '&#x2550;', '&#x2550;'], true, $col_detail);

	}
}


class set_furniture extends AssetSet
{
	public $col_frame;
	public $col_fabric;

	const TINT_TOP = 2;

	public function __construct($col_frame = null, $col_fabric = null)
	{
		$this->col_frame	= $col_frame	? $col_frame	: '#740';
		$this->col_fabric	= $col_fabric	? $col_fabric	: '#c55';
	}

	public function t_tableTop ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour = tint($colour, self::TINT_TOP);

		return new Tile($colour, ['&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;'], TPL_HIGHOBSTACLE);
	}

	public function scn_tableFront_l ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour_light = tint($colour, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour_light, null, '&nbsp;'),
			1 => new SpriteElement($colour_light, null, '&nbsp;'),
			2 => new SpriteElement($colour_light, null, '&nbsp;'),
			3 => new SpriteElement(null, $colour, '&#x2590;'),
			4 => new SpriteElement(null, $colour, '&#x2580;'),
			5 => new SpriteElement(null, $colour, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tableFront_m ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour_light = tint($colour, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour_light, null, '&nbsp;'),
			1 => new SpriteElement($colour_light, null, '&nbsp;'),
			2 => new SpriteElement($colour_light, null, '&nbsp;'),
			3 => new SpriteElement(null, $colour, '&#x2580;'),
			4 => new SpriteElement(null, $colour, '&#x2580;'),
			5 => new SpriteElement(null, $colour, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tableFront_r ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour_light = tint($colour, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour_light, null, '&nbsp;'),
			1 => new SpriteElement($colour_light, null, '&nbsp;'),
			2 => new SpriteElement($colour_light, null, '&nbsp;'),
			3 => new SpriteElement(null, $colour, '&#x2580;'),
			4 => new SpriteElement(null, $colour, '&#x2580;'),
			5 => new SpriteElement(null, $colour, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tableHalf_t ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour_light = tint($colour, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour_light, null, '&nbsp;'),
			1 => new SpriteElement($colour_light, null, '&nbsp;'),
			2 => new SpriteElement($colour_light, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tableHalf_b ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);
		$colour_light = tint($colour, self::TINT_TOP);

		return new Scenery(new Sprite([
			3 => new SpriteElement($colour_light, null, '&nbsp;'),
			4 => new SpriteElement($colour_light, null, '&nbsp;'),
			5 => new SpriteElement($colour_light, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_chair_l ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);

		return new Scenery(new Sprite([
			2 => new SpriteElement(null, $colour, '&#x258c;'),
			3 => new SpriteElement(null, $colour, '&#x2590;'),
			4 => new SpriteElement(null, $colour, '&#x2580;'),
			5 => new SpriteElement(null, $colour, '&#x258c;'),
		]));
	}

	public function scn_chair_r ($colour = null)
	{
		$colour = $this->getColour($this->col_frame, $colour);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $colour, '&#x2590;'),
			3 => new SpriteElement(null, $colour, '&#x2590;'),
			4 => new SpriteElement(null, $colour, '&#x2580;'),
			5 => new SpriteElement(null, $colour, '&#x258c;'),
		]));
	}

	public function scn_bed_tl ($col_frame = null, $col_fabric = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		$col_fabric		= $this->getColour($this->col_fabric, $col_fabric);
		$col_fabric_top	= tint($col_fabric, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_frame_top, '&#x2584;'),
			3 => new SpriteElement($col_frame_top, null, '&nbsp;'),
			4 => new SpriteElement('#bbb', '#fff', '&#x2584;'),
			5 => new SpriteElement($col_fabric_top, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bed_tr ($col_frame = null, $col_fabric = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		$col_fabric		= $this->getColour($this->col_fabric, $col_fabric);
		$col_fabric_top	= tint($col_fabric, self::TINT_TOP);

		return new Scenery(new Sprite([
			2 => new SpriteElement(null, $col_frame_top, '&#x2584;'),
			3 => new SpriteElement($col_fabric_top, null, ' '),
			4 => new SpriteElement($col_fabric_top, null, ' '),
			5 => new SpriteElement($col_frame_top, null, ' '),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bed_bl ($col_frame = null, $col_fabric = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		$col_fabric		= $this->getColour($this->col_fabric, $col_fabric);
		$col_fabric_top	= tint($col_fabric, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_frame, null, ' '),
//			1 => new SpriteElement($col_fabric, $col_fabric_top, '&#x2580;'),
			1 => new SpriteElement('#888', '#bbb', '&#x2580;'),
			2 => new SpriteElement($col_fabric, $col_fabric_top, '&#x2580;'),
			3 => new SpriteElement($col_frame, null, ' '),
			4 => new SpriteElement(null, $col_frame, '&#x2580;'),
			5 => new SpriteElement(null, $col_frame, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bed_br ($col_frame = null, $col_fabric = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		$col_fabric		= $this->getColour($this->col_fabric, $col_fabric);
		$col_fabric_top	= tint($col_fabric, self::TINT_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_fabric, $col_fabric_top, '&#x2580;'),
			1 => new SpriteElement($col_fabric, $col_fabric_top, '&#x2580;'),
			2 => new SpriteElement($col_frame, null, ' '),
			3 => new SpriteElement(null, $col_frame, '&#x2580;'),
			4 => new SpriteElement(null, $col_frame, '&#x2580;'),
			5 => new SpriteElement($col_frame, null, ' '),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_tl ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			3 => new SpriteElement(null,$col_frame_top, '&#x2590;'),
			4 => new SpriteElement($col_frame_top, $col_frame_top, '&nbsp;'),
			5 => new SpriteElement($col_frame_top, $col_frame_top, '&nbsp;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_ml ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement(null,$col_frame, '&#x2590;'),
			1 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			2 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			3 => new SpriteElement(null,$col_frame, '&#x2590;'),
			4 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			5 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_bl ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement(null,$col_frame, '&#x2590;'),
			1 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			2 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelfCabinet_bl ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement(null,$col_frame, '&#x2590;'),
			1 => new SpriteElement($col_frame, $col_frame, '&nbsp;'),
			2 => new SpriteElement($col_frame, '#aaa', '&bull;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_tr ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			3 => new SpriteElement($col_frame_top, $col_frame_top, '&nbsp;'),
			4 => new SpriteElement($col_frame_top, $col_frame_top, '&nbsp;'),
			5 => new SpriteElement(null,$col_frame_top, '&#x258c;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_mr ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			1 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			2 => new SpriteElement(null,$col_frame, '&#x258c;'),
			3 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			4 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			5 => new SpriteElement(null,$col_frame, '&#x258c;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelf_br ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			1 => new SpriteElement($col_frame_top, $col_frame, '&#x203e;'),
			2 => new SpriteElement(null,$col_frame, '&#x258c;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_shelfCabinet_br ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);

		return new Scenery(new Sprite([
		[
			0 => new SpriteElement($col_frame, '#aaa', '&bull;'),
			1 => new SpriteElement($col_frame, $col_frame, '&nbsp;'),
			2 => new SpriteElement(null,$col_frame, '&#x258c;'),
		]]), TPL_HIGHOBSTACLE);
	}

	public function scn_smallTable ($col_frame = null)
	{
		$col_frame		= $this->getColour($this->col_frame, $col_frame);
		$col_frame_top	= tint($col_frame, self::TINT_TOP);

		return new Scenery(new Sprite([
		[
//			0 => new SpriteElement(null, $col_frame, '&#x2017;'),
//			1 => new SpriteElement($col_frame_top, $col_frame, '&#x2017;'),
//			2 => new SpriteElement(null, $col_frame, '&#x2017;'),
			0 => new SpriteElement(null, $col_frame_top, '&#x2590;'),
			1 => new SpriteElement($col_frame_top, null, '&nbsp;'),
			2 => new SpriteElement(null, $col_frame_top, '&#x258c;'),
			3 => new SpriteElement(null, $col_frame, '&#x2590;'),
			4 => new SpriteElement(null, $col_frame, '&#x2580;'),
			5 => new SpriteElement(null, $col_frame, '&#x258c;'),
		]]), TPL_HIGHOBSTACLE);
	}

}


class obj_fire extends obj_chest
{
	const SPR_LEFT	= 1;
	const SPR_MID	= 2;
	const SPR_RIGHT	= 3;

	public function __construct()
	{
		parent::__construct('Fire', [self::getSprite()]);

		$this->inventory->TFI = TFI_FIRE;
	}

	static function getSprite ($SPR = null)
	{
		$slm_fire_lp = new SpriteElement(null, '#f40', '(');
		$slm_fire_rp = new SpriteElement(null, '#f40', ')');
//		$slm_fire_us = new SpriteElement(null, '#f40', '_');
		$slm_fire_us = new SpriteElement(null, '#f40', '&#x039b;');

		switch ($SPR)
		{

			case null: return new Sprite(
				[
					[
						0 => $slm_fire_lp,
						1 => $slm_fire_lp,
						3 => $slm_fire_lp,
						4 => new SpriteElement(null, '#fa0', '&#x25b2;'),
						5 => $slm_fire_rp
					],
					[
						1=>$slm_fire_rp,
						2 => $slm_fire_rp,
						3 => $slm_fire_lp,
						4 => new SpriteElement(null, '#fa0', '&#x2666;'),
						5 => $slm_fire_rp
					],
				]);

			case self::SPR_LEFT: return new Sprite(
				[
					[
						0 => $slm_fire_lp,
						1 => $slm_fire_lp,
						2 => $slm_fire_us,
						3 => $slm_fire_lp,
						4 => new SpriteElement(null, '#fa0', '&#x25b2;'),
					],
					[
						1=>$slm_fire_rp,
						2 => $slm_fire_rp,
						3 => $slm_fire_lp,
						4 => new SpriteElement(null, '#fa0', '&#x2666;'),
					],
				]);

			case self::SPR_MID: return new Sprite(
				[
					[
						0 => $slm_fire_lp,
						1 => $slm_fire_lp,
						2 => $slm_fire_us,
						4 => new SpriteElement(null, '#fa0', '&#x25b2;'),
					],
					[
						0 => $slm_fire_us,
						1 => $slm_fire_rp,
						2 => $slm_fire_rp,
						4 => new SpriteElement(null, '#fa0', '&#x2666;'),
					],
				]);

			case self::SPR_RIGHT: return new Sprite(
				[
					[
						0 => $slm_fire_lp,
						1 => $slm_fire_lp,
						4 => new SpriteElement(null, '#fa0', '&#x25b2;'),
						5 => $slm_fire_rp,
					],
					[
						0 => $slm_fire_us,
						1 => $slm_fire_rp,
						2 => $slm_fire_rp,
						4 => new SpriteElement(null, '#fa0', '&#x2666;'),
						5 => $slm_fire_rp,
					],
				]);
		}
	}
}

class obj_chest extends AsObject
{
	public $inventory;

	public function __construct($name, $spriteSet, $items = [], $keyItem = null)
	{
		$this->inventory = new Inventory($this);

		if ($items) foreach ($items as $item) { $this->inventory->add($item); }	// TERRIBLE
		$this->inventory->locked = true; // Chest has to be locked AFTER items are added.

		$this->addBehaviour(
			new obhv_lootable($keyItem, $spriteSet)
		);

		parent::__construct($name, $spriteSet, LAYER_CHEST);
	}
}

class obj_portal extends AsObject

{
	public function __construct($name, $spriteSet, $teleport_n_offset, $teleport_w_offset, $MAP = null, $strip_DIR = null, $strip_length = null)
	{
		$this->addBehaviour(
			new obhv_teleporter($teleport_n_offset, $teleport_w_offset, $MAP)
		);

		if (isset($strip_DIR, $strip_length))
		{
			$start = 1;

			switch ($strip_DIR)
			{
				case DIR_NORTH:
					$strip_length = 0 - $strip_length;
					$start = -1;
				case DIR_SOUTH:
					for ($n_offset = $start; $n_offset < $strip_length; $n_offset ++)
					{
						$this->constituents[$n_offset][0] = new ObjectConstituent($spriteSet);
					}
					break;

				case DIR_WEST:
					$strip_length = 0 - $strip_length;
					$start = -1;
				case DIR_EAST:
					for ($w_offset = $start; $w_offset < $strip_length; $w_offset ++)
					{
						$this->constituents[0][$w_offset] = new ObjectConstituent($spriteSet);
					}
					break;
			}
		}

		parent::__construct($name, $spriteSet, LAYER_PORTAL);
	}
}



class obhv_teleporter extends ObjectBehaviour
{
	public $n_offset;
	public $w_offset;
	public $map;

	public function __construct($n_offset, $w_offset, $MAP = null)
	{
		$this->onReaction = true;

		$description = "Teleports to {$n_offset}:{$w_offset}"
		. ($MAP ? " - {$MAP}." : '.');

		$this->n_offset	= $n_offset;
		$this->w_offset	= $w_offset;
		$this->map		= $MAP;

		parent::__construct($description, BHVK_TELEPORT, 0);
	}

	public function onReaction(AsObject $instigator, $DIR)
	{
		global $view;
		global $player;

		if ($instigator === $player)
        {
			if ($this->owner->constituents)
			{
				$destination_n_offset = $player->n_offset - $this->owner->n_offset + $this->n_offset;
				$destination_w_offset = $player->w_offset - $this->owner->w_offset + $this->w_offset;

				switch ($DIR)
				{
					case DIR_NORTH:	$destination_n_offset --;
					case DIR_SOUTH:	$destination_n_offset ++;
					case DIR_WEST:	$destination_w_offset --;
					case DIR_EAST:	$destination_w_offset ++;
				}

				console_echo("<<#fff>>{$this->owner->name}<> has constituents!", '#ffa', CNS_BEHAVIOUR);
			}
			else
			{
				$destination_n_offset = $this->n_offset;
				$destination_w_offset = $this->w_offset;

				console_echo("<<#fff>>{$this->owner->name}<> has no constituents.", '#afa', CNS_BEHAVIOUR);
			}

            console_echo("Entering the {$this->owner->name} portal!");		//XXX

			$this->owner->permitEntry = false;
			$player->move($destination_n_offset, $destination_w_offset, $this->map);

            $view->forceUpdate = true;
            return false;
        }
	}
}

class NPC_vendor extends NPC
{
	public $CUR;

	public function __construct($name, $spriteSet, $gender = GND_MALE, $speechFile = null, $CUR = null, $NPCIs = null, $wares = [])
	{
		$canBuy = isset($canBuy) ? $canBuy : true;
		$canSell = isset($canSell) ? $canSell : true;

		$this->FAC = FAC_NPC_NEUTRAL;

		$this->CUR = isset($CUR) ? $CUR : CUR_GOLD;

		parent::__construct($name, $spriteSet, $gender, $speechFile);

		if ($NPCIs instanceof NPCInteraction) $NPCIs = [$NPCIs];

		if (is_array($NPCIs))
		{
			foreach ($NPCIs as $NPCI)
			{
				$this->addNPCI($NPCI);
			}
		}

		global $currencies; //XXX
		console_echo("{$this->name} deals in {$currencies[$this->CUR]->name}");

		$this->inventory->CUR = $this->CUR;
		foreach ($wares as $thing)
		{
			$this->inventory->add($thing);
		}
	}
}

// IN refers to INTO THE NPC'S POSSESION
// OUT refers to OUT OF THE NPC'S POSSESION

class npci_exchange extends NPCInteraction
{
	const COMMISSION = 0.15;

	public $CURs_in = [];
	public $CURs_out = [];

	public function __construct($CURs_in, $CURs_out)
	{
		$this->CURs_in = $CURs_in;
		$this->CURs_out = $CURs_out;

		parent::__construct('Exchange', 'Exchange currencies.');
	}

	public function onClick($UIN)
	{
		global $currencies;
		global $player;

		$update = new stdClass();
		$update->type = $this->key;
		$update->currencies = [];

		foreach ($this->CURs_in as $CUR)
		{
			if (!isset($player->wallet->contents[$CUR])) continue;

			$update_currency = new stdClass();

			$update_currency->name	= $currencies[$CUR]->name;
			$update_currency->sym	= $currencies[$CUR]->symbol;
			$update_currency->CUR	= $CUR;

			$update->currencies[] = $update_currency;
		}

		update(UPD_INTERACTIONS, $update);
	}

	public function onItemClick($UIN, $content)
	{
		global $currencies;
		global $player;

		$content = explode('#', "{$content}");

		$CUR_in = (int)$content[0];
		$CUR_out = isset($content[1]) ? (int)$content[1] : null;
		$amount_in = isset($content[2]) ? (int)str_replace(',', '', $content[2]) : null;


		if (isset($CUR_out))
		{
			if (!in_array($CUR_in, $this->CURs_in)
				|| !in_array($CUR_out, $this->CURs_out)
				|| $amount_in > $player->wallet->contents[$CUR_in])
			{
				update_thoughts('Naughty, naughty!');
				//packet hacking has transpired
				$this->onClick($UIN);
				return;
			}

			$amount_out = convertCurrency($amount_in, $CUR_in, $CUR_out) * (1 - self::COMMISSION);

			console_echo("In:  {$currencies[$CUR_in]->symbol} {$amount_in}");
			console_echo("Out: {$currencies[$CUR_out]->symbol} {$amount_out}");

			if ($player->wallet->remove($amount_in, $CUR_in))
			{

				$player->wallet->add($amount_out, $CUR_out);

				$exchangeDetails = new stdClass();

				$exchangeDetails->CUR_in = $CUR_in;
				$exchangeDetails->CUR_out = $CUR_out;
				$exchangeDetails->amount_in = $amount_in;
				$exchangeDetails->amount_out = $amount_out;

				$this->owner->speak(SPSI_EXCHANGING, $exchangeDetails);
			}
			else
			{
				update_thoughts('Looks like I don\'t have the money for that. Weird.');
			}

			$this->onClick($UIN);
		}
		else
		{
			$update = new stdClass();
			$update->type = $this->key . '_CUR';
			$update->currencies = [];

			$update->CUR = $CUR_in;
			$update->name = $currencies[$CUR_in]->name;
			$update->sym = $currencies[$CUR_in]->symbol;
//			$update->amount = number_format($player->wallet->contents[$CUR_in]);

			foreach ($this->CURs_out as $CUR_out)
			{
				if (!isset($player->wallet->contents[$CUR_out]) || !$player->wallet->contents[$CUR_out] || $CUR_in === $CUR_out) continue;

				$enough = true;
				$amount_in = 1;

				do
				{
					$amount_out = floor(convertCurrency($amount_in, $CUR_in, $CUR_out) * (1 - self::COMMISSION));

					if ($amount_out >= 1)
					{
						$update_currency = new stdClass();

						$update_currency->CUR = $CUR_out;
						$update_currency->name = $currencies[$CUR_out]->name;
						$update_currency->sym = $currencies[$CUR_out]->symbol;
						$update_currency->amount_out = number_format($amount_out);
						$update_currency->amount_in = number_format($amount_in);

						$update->currencies[] = $update_currency;
					}

					$amount_in *= 10;
					if ($player->wallet->contents[$CUR_in] < $amount_in) $enough = false;

				} while ($enough === true);

				$update_currency = new stdClass();

				$update_currency->CUR = $CUR_out;
				$update_currency->name = $currencies[$CUR_out]->name;
				$update_currency->sym = $currencies[$CUR_out]->symbol;
				$update_currency->amount_out = number_format(floor(convertCurrency($player->wallet->contents[$CUR_in], $CUR_in, $CUR_out) * (1 - self::COMMISSION)));
				$update_currency->amount_in = number_format($player->wallet->contents[$CUR_in]);

				$update->currencies[] = $update_currency;
			}

			update(UPD_INTERACTIONS, $update);
		}

//		update_thoughts("Gotta rid me of these shitty {$currencies[(int)$content]->name}!");
	}
}

class dbhv_leaveLootableCorpse extends DudeBehaviour
{
	function __construct($spriteSet)
	{
		$this->onDeath = true;

		if (isset($spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $spriteSet[SPRI_CORPSE];
		}
		else
		{
			$this->spriteSet[SPRI_CORPSE] = Dude::getCorpseSprite($spriteSet[SPRI_DEFAULT]);
		}

		$description  = 'Leaves a lootable corpse.';
		parent::__construct($description, BHVK_CORPSE, 1);
	}

	function onDeath(Attack $attack)
	{
		global $map;

		console_echo("Leaving corpse of {$this->owner->name}", '#faf');

		if (isset($this->owner->spriteSet[SPRI_CORPSE]))
		{
			$this->spriteSet[SPRI_CORPSE] = $this->owner->spriteSet[SPRI_CORPSE];
			$this->owner->changeLayer(LAYER_CHEST);
			$this->owner->setSPRI(SPRI_CORPSE);
		}

		$obj_corpse = new obj_corpse(
			"Corpse of {$this->owner->name}",
			[$this->spriteSet[SPRI_CORPSE]],
			$this->owner->inventory->contents);

		$obj_corpse->n_offset = $this->owner->n_offset;
		$obj_corpse->w_offset = $this->owner->w_offset;

		if (isset($map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE]))
		{
			$existingObject = $map->objects[$this->owner->n_offset][$this->owner->w_offset][LAYER_COLLECTIBLE];

			$obj_corpse->inventory->locked = false;
			if (isset($existingObject->item))
			{
				$obj_corpse->inventory->add($existingObject->item);
			}
			elseif (isset($existingObject->inventory))
			{
				$existingObject->inventory->locked = false;

				foreach ($existingObject->inventory->contents as $item)
				{
					$obj_corpse->inventory->add($existingObject->inventory->pullItem($item));
				}

				$existingObject->inventory->locked = true;
			}
			$obj_corpse->inventory->locked = true;
		}
		console_echo("<<#fff>>\"{$this->owner->name}\"<> is about to be a corpse.");
		$this->owner->changeTo($obj_corpse);
		console_echo("<<#fff>>\"{$this->owner->name}\"<> should now be a corpse.");
	}


}

class dbhv_fleeWhenAttacked extends DudeBehaviour
{
//	public $oldMovement = null;

	public $safeDistance;
	public $target;
	public $fleecooldown;

	public $dbhv;

	function __construct($safeDistance = 20, $fleecooldown = 0.4)
	{
		$this->onDefend = true;
		$this->onIdle = true;

		$description = 'Flees when attacked.';
		$this->safeDistance = $safeDistance;
		$this->fleecooldown = $fleecooldown;

		parent::__construct($description, 'flee');
	}

	function onDefend(Attack $attack)
	{
		if (!$attack->isBaseAttack) return;

		$this->target = $attack->attacker;
		console_echo("{$this->owner->name} is fleeing {$this->target->name}.");

		$this->dbhv = new obhv_flee($attack->attacker, $this->fleecooldown);

		$this->owner->addBehaviour($this->dbhv);

	}

	function onIdle()
	{
		if (isset($this->target) && $this->owner->distanceFrom($this->target) > $this->safeDistance)
		{
			console_echo("{$this->owner->name} is no longer fleeing {$this->target->name}.");

			$this->owner->removeBehaviour($this->dbhv);

			unset($this->target);
		}
	}
}

class dbhv_speak extends DudeBehaviour
{

	static $oddsOfCombatSpeech = 50;

	public function __construct($SPSIs_exceptions = null)
	{
		if (!isset($SPSIs_exceptions)) $SPSIs_exceptions = [];

		$this->onReaction	= in_array(SPSI_CONVERSING,	$SPSIs_exceptions) === false;
		$this->onEngage		= in_array(SPSI_GREETING,	$SPSIs_exceptions) === false;
		$this->onDisengage	= in_array(SPSI_SAYING_BYE,	$SPSIs_exceptions) === false;

		$this->onAttack		= in_array(SPSI_ATTACKING,	$SPSIs_exceptions) === false;
		$this->onMiss		= in_array(SPSI_MISSING,	$SPSIs_exceptions) === false;
		$this->onStrike		= in_array(SPSI_STRIKING,	$SPSIs_exceptions) === false;
		$this->onKill		= in_array(SPSI_KILLING,	$SPSIs_exceptions) === false;

		$this->onDefend		= in_array(SPSI_DEFENDING,	$SPSIs_exceptions) === false;
		$this->onDeflect	= in_array(SPSI_DEFLECTING,	$SPSIs_exceptions) === false;
		$this->onTakeHit	= in_array(SPSI_TAKING_HIT,	$SPSIs_exceptions) === false;
		$this->onDeath		= in_array(SPSI_DYING,		$SPSIs_exceptions) === false;

		$description = "Greets, converses and dismisses when interacted with.";

		parent::__construct($description, BHVK_SPEAK);
	}

	public function onEngage(Player $player)
	{
		if (!$player->handleEventOfInterest(EOI_ENGAGE_NPC, $this->owner))
		{
			$this->owner->speak(SPSI_GREETING, null, true);
		}
	}

	public function onDisengage(Player $player)
	{
			$this->owner->speak(SPSI_SAYING_BYE, null, true);
	}

	public function onReaction(AsObject $instigator, $DIR)
	{
		if ($instigator instanceof Player) $this->owner->speak(SPSI_CONVERSING);
	}


	public function onAttack(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_ATTACKING, $attack);
	}

	public function onMiss(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_MISSING, $attack);
	}

	public function onStrike(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_STRIKING, $attack);
	}

	public function onKill(Attack $attack)
	{
		$this->owner->speak(SPSI_KILLING, $attack);
	}

	public function onDefend(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_DEFENDING, $attack);
	}

	public function onDeflect(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_DEFLECTING, $attack);
	}

	public function onTakeHit(Attack $attack)
	{
		if (percentageToBool(self::$oddsOfCombatSpeech)) $this->owner->speak(SPSI_TAKING_HIT, $attack);
	}

	public function onDeath(Attack $attack)
	{
		$this->owner->speak(SPSI_DYING, $attack);
	}
}