<?php

// CAUTION!
// NEVER EDIT A REQ FILE!


class set_common extends AssetSet
{
	public function t_solid ($colour, $TPL = null)
	{
		$TPL = $TPL ? $TPL : TPL_LOWOBSTACLE;

		return new Tile($colour, ['&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;', '&nbsp;'], $TPL, $colour);
	}

	public function t_stairs ($col_top, $col_front = null)
	{
		$col_front = $col_front ? $col_front : tint($col_top, -3);

		return new Tile($col_top, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_STAIRS, $col_front);
	}

	public function scn_archDoor ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_half,
			1 => $slm_full,
			2 => $slm_half,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_l ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_half,
			1 => $slm_full,
			2 => $slm_full,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_r ($colour)
	{
		$slm_half = new SpriteElement(null, $colour, '&#x2584;');
		$slm_full = new SpriteElement($colour, null, '&nbsp;');

		return new Scenery(new Sprite([
			0 => $slm_full,
			1 => $slm_full,
			2 => $slm_half,
			3 => $slm_full,
			4 => $slm_full,
			5 => $slm_full,
		]));
	}

	public function scn_archDoor_half ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2584;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2584;'),
		]));
	}

	public function scn_archDoor_half_l ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2584;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]));
	}

	public function scn_archDoor_half_r ($colour)
	{
		return new Scenery(new Sprite([
			3 => new SpriteElement($colour, null, '&nbsp;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2584;'),
		]));
	}

	public function scn_fade_up_t ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2591;'),
			1 => new SpriteElement(null,$colour, '&#x2591;'),
			2 => new SpriteElement(null,$colour, '&#x2591;'),
			3 => new SpriteElement(null,$colour, '&#x2592;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2592;'),
		]), null, true);
	}

	public function scn_fade_up_b ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2593;'),
			1 => new SpriteElement(null,$colour, '&#x2593;'),
			2 => new SpriteElement(null,$colour, '&#x2593;'),
			3 => new SpriteElement($colour,  null, '&nbsp;'),
			4 => new SpriteElement($colour,  null, '&nbsp;'),
			5 => new SpriteElement($colour,  null, '&nbsp;'),
		]), null, true);
	}

	public function scn_fade_down_t ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement($colour,  null, '&nbsp;'),
			1 => new SpriteElement($colour,  null, '&nbsp;'),
			2 => new SpriteElement($colour,  null, '&nbsp;'),
			3 => new SpriteElement(null,$colour, '&#x2593;'),
			4 => new SpriteElement(null,$colour, '&#x2593;'),
			5 => new SpriteElement(null,$colour, '&#x2593;'),
		]), null, true);
	}

	public function scn_fade_down_b ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2592;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2592;'),
			3 => new SpriteElement(null,$colour, '&#x2591;'),
			4 => new SpriteElement(null,$colour, '&#x2591;'),
			5 => new SpriteElement(null,$colour, '&#x2591;'),
		]), null, true);
	}

	public function scn_fade_right ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2591;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2593;'),
			3 => new SpriteElement(null,$colour, '&#x2591;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2593;'),
		]), null, true);
	}

	public function scn_fade_left ($colour)
	{
		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$colour, '&#x2593;'),
			1 => new SpriteElement(null,$colour, '&#x2592;'),
			2 => new SpriteElement(null,$colour, '&#x2591;'),
			3 => new SpriteElement(null,$colour, '&#x2593;'),
			4 => new SpriteElement(null,$colour, '&#x2592;'),
			5 => new SpriteElement(null,$colour, '&#x2591;'),
		]), null, true);
	}
}



class set_masonry extends AssetSet
{
	public $colour;

	const TINT_TOP				= 3;
	const TINT_PAVERS			= 3;
	const TINT_PAVERS_SIDE		= 0;
//	const TINT_PAVERS			= 5;
//	const TINT_PAVERS_SIDE		= 2;
	const TINT_DARK				= -2;
	const TINT_VOID				= -5;

	const COL_DREAMSCAPE		= '#737';
	const COL_REDBRICK			= '#832';
	const COL_DIRT				= '#972';

	public function __construct($colour = null)
	{
		$this->colour = $this->getColour('#654', $colour);
	}

	function t_bigWall ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['_', 'I', '_', 'L', '_', '_'], TPL_VERTICAL);
	}

	function t_bigWall_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['L', '_', '_', '_', 'I', '_'], TPL_HIGHOBSTACLE);
	}

	function t_bigWall_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['L', '_', '_', '_', 'I', '_'], TPL_HIGHOBSTACLE);
	}

	function t_smallWall ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_smallWall_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_smallWall_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['&#x2584;', '&#x2584;', '&nbsp;', '&nbsp;', '&#x2584;', '&#x2584;'], TPL_VERTICAL, -1);
	}

	function t_pavers ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_PAVERS);
		return new Tile($colour, ['L', '_', 'L', 'L', 'L', '_'], TPL_OPENGROUND, -1);
	}

	function t_stairs ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour_top = tint($colour, self::TINT_PAVERS);
		return new Tile($colour_top, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_OPENGROUND, $colour);
	}

	function t_stonyFloor ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['O','(',')','(',')','O'], TPL_OPENGROUND, -1);
	}

	function t_cliff ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		return new Tile($colour, ['&nbsp;','_','/','/','&#x005c;','&nbsp;'], TPL_VERTICAL);
	}

	function t_cliff_top ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);
		return new Tile($colour, ['/','&nbsp;','&nbsp;','&nbsp;', '_', '/'], TPL_OPENGROUND);
	}

	function t_cliff_void ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);
		return new Tile($colour, ['/','&#x005c;','&nbsp;','&#x005c;','&nbsp;','&nbsp;'], TPL_WALL);
	}

	function t_cairn_w ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2588;','&nbsp;','&nbsp;','&#x258c;', '&nbsp;', '&nbsp;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_cairn ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&nbsp;','&nbsp;','&nbsp;','&nbsp;', '&nbsp;', '&nbsp;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_cairn_s ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&nbsp;','&nbsp;','&nbsp;','&#x2584;', '&#x2588;', '&#x2588;'], TPL_HIGHOBSTACLE, $col_dark);
	}

	function t_tiles ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_TOP);


		return new Tile($colour, ['&#x2588;','&#x258c;','&nbsp;','&nbsp;', '&#x2590;', '&#x2588;'], TPL_OPENGROUND, -1);
	}

	function spr_brick ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);
		$col_top = tint($colour, self::TINT_TOP);

		return new Sprite([
			new SpriteElement($col_top, $col_dark, 'L'),
			new SpriteElement($col_top, $col_dark, '_'),
			new SpriteElement($col_top, $col_dark, '_'),
			new SpriteElement($colour, $col_top, 'L'),
			new SpriteElement($colour, $col_top, '_'),
			new SpriteElement($colour, $col_top, '_')
		]);
	}

	function scn_paverSide ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_PAVERS_SIDE);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $colour, '&#x2580;'),
			1 => new SpriteElement(null, $colour, '&#x2580;'),
			2 => new SpriteElement(null, $colour, '&#x2580;'),
		]));
	}

	function scn_rock ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2590;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, null, '&nbsp;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_rock_sign ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2590;'),
			1 => new SpriteElement($colour, $col_dark, '&#x2261;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, null, '&nbsp;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_tl ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			1 => new SpriteElement(null, $col_dark, '&#x2590;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x258c;'),
			5 => new SpriteElement($colour, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_bl ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_dark, null, '&nbsp;'),
			1 => new SpriteElement($col_dark, $col_dark, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2580;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement($col_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_tr ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($colour, null, '&nbsp;'),
			4 => new SpriteElement($colour, null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_bigRock_br ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2584;'),
			5 => new SpriteElement(null, $col_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_cairn_l ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_dark, '&#x2584;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement($colour, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_dark, '&#x2580;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement($col_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_cairn_r ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement($colour, null, '&nbsp;'),
			1 => new SpriteElement($colour, null, '&nbsp;'),
			2 => new SpriteElement(null, $colour, '&#x2584;'),
			3 => new SpriteElement($col_dark, $colour, '&nbsp;'),
			4 => new SpriteElement($col_dark, null, '&nbsp;'),
			5 => new SpriteElement(null, $col_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_crack_t ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);

		return new Scenery(new Sprite([
			[
				1 => new SpriteElement(null, $colour, '&#x258c;'),
				4 => new SpriteElement($colour, null, '&nbsp;'),
			],
		]));
	}

	function scn_crack_b ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, self::TINT_VOID);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null, $colour, '&#x2590;'),
				1 => new SpriteElement($colour, null, '&nbsp;'),
				2 => new SpriteElement(null, $colour, '&#x258c;'),
				3 => new SpriteElement($colour, null, '&nbsp;'),
				4 => new SpriteElement($colour, null, '&nbsp;'),
				5 => new SpriteElement(null, $colour, '&#x258c;'),
			],
		]));
	}
}


class set_edges extends AssetSet
{
	public $colour;

	public function __construct($colour)
	{
		$this->colour = $colour;
	}

	function scn_n ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		]), [DIR_NORTH => TPL_VERTICAL]);
	}

	function scn_s ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		3 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		]), [DIR_SOUTH => TPL_VERTICAL]);
	}

	function scn_w ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		]), [DIR_WEST => TPL_VERTICAL]);
	}

	function scn_e ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_EAST => TPL_VERTICAL]);
	}

	function scn_nw ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		]), [DIR_NORTH => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL]);
	}

	function scn_ne ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_NORTH => TPL_VERTICAL, DIR_EAST => TPL_VERTICAL]);
	}

	function scn_sw ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		]), [DIR_SOUTH => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL]);
	}

	function scn_se ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_SOUTH => TPL_VERTICAL, DIR_EAST => TPL_VERTICAL]);
	}

	function scn_ns ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),

		3 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		]), [DIR_NORTH => TPL_VERTICAL, DIR_SOUTH => TPL_VERTICAL]);
	}

	function scn_ew ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_EAST => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL]);
	}

	function scn_nsw ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		]), [DIR_NORTH => TPL_VERTICAL, DIR_SOUTH => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL]);
	}

	function scn_nse ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_NORTH => TPL_VERTICAL, DIR_SOUTH => TPL_VERTICAL, DIR_EAST => TPL_VERTICAL]);
	}

	function scn_ewn ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_EAST => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL, DIR_NORTH => TPL_VERTICAL]);
	}

	function scn_ews ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]), [DIR_EAST => TPL_VERTICAL, DIR_WEST => TPL_VERTICAL, DIR_SOUTH => TPL_VERTICAL]);
	}

	function scn_nswe ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Scenery( new Sprite([
		0 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		1 => new SpriteElement(null, tint($colour, 2, true), '&#x2580;'),
		2 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),

		3 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x258c;'),
		4 => new SpriteElement(null, tint($colour, 2, true), '&#x2584;'),
		5 => new SpriteElement(tint($colour, 2, true), tint($colour, 1, true), '&#x2590;'),
		]),	TPL_VERTICAL);
	}
}

class set_trees extends AssetSet
{
	public $col_leaves;
	public $col_trunk;

	public $spe_detail;
	public $spe_detail_dark;

	const TINT_TRUNK_DARK	= -2;
	const TINT_TRUNK_LIGHT	= 2;
	const TINT_TRUNK_TOP	= 5;

	const TINT_LEAVES_DARK	= -2;

	public function __construct($col_leaves = null, $col_trunk = null, SpriteElement $spe_detail = null)
	{
		$this->col_leaves		= $this->getColour('#0a0', $col_leaves);
		$this->col_trunk		= $this->getColour('#840', $col_trunk);

		$this->spe_detail = $spe_detail;
	}

	public function getDetailElement($colour, $isDark)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);

		if ($isDark)
		{
			if ($this->spe_detail)
			{
				$slm = $this->spe_detail;
				$slm->bg = tint($col_leaves, self::TINT_LEAVES_DARK);
				return $slm;
			}
			else
			{
				return new SpriteElement(tint($col_leaves, self::TINT_LEAVES_DARK), $col_leaves, 'v');
			}
		}
		else
		{
			if ($this->spe_detail)
			{
				$slm = $this->spe_detail;
				$slm->bg = $col_leaves;
				return $slm;
			}
			else
			{
				return new SpriteElement($col_leaves, tint($col_leaves, self::TINT_LEAVES_DARK), 'v');
			}
		}
	}

	function scn_trunk ($colour = null)
	{
		$col_trunk = $this->getColour($this->col_trunk, $colour);
		$col_trunk_dark = tint($col_trunk, self::TINT_TRUNK_DARK);
		$col_trunk_light = tint($col_trunk, self::TINT_TRUNK_LIGHT);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_trunk_light, '&#x2590;'),
			1 => new SpriteElement($col_trunk, $col_trunk_light, '&#x2502;'),
			2 => new SpriteElement(null, $col_trunk_dark, '&#x258c;'),
			3 => new SpriteElement(null, $col_trunk_light, '&#x2590;'),
			4 => new SpriteElement($col_trunk, $col_trunk_light, '&#x2502;'),
			5 => new SpriteElement(null, $col_trunk_dark, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);
	}
//
	function scn_stump ($colour = null)
	{
		$col_trunk = $this->getColour($this->col_trunk, $colour);
		$col_trunk_dark = tint($col_trunk, self::TINT_TRUNK_DARK);
		$col_trunk_light = tint($col_trunk, self::TINT_TRUNK_LIGHT);

		$col_trunk_top = tint($col_trunk, self::TINT_TRUNK_TOP);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_trunk_top, '&#x2590;'),
			1 => new SpriteElement($col_trunk_top, $col_trunk_light, '@'),
			2 => new SpriteElement(null, $col_trunk_top, '&#x258c;'),
			3 => new SpriteElement(null, $col_trunk_light, '&#x2590;'),
			4 => new SpriteElement($col_trunk, $col_trunk_light, '&#x2502;'),
			5 => new SpriteElement(null, $col_trunk_dark, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);

	}


	public function scn_tree_tl ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_dark = $this->getDetailElement($col_leaves, true);

		return new Scenery(new Sprite([
			1 => new SpriteElement(null, $col_leaves_dark, '&#x2584;'),
			2 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2580;'),
			3 => new SpriteElement(null, $col_leaves_dark, '&#x2584;'),

			4 => $spe_detail_dark,

			5 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tree_tr ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
			1 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			3 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),

			4 => $spe_detail_light,

			5 => new SpriteElement(null, $col_leaves, '&#x2584;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tree_tm ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			1 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),

			2 => $spe_detail_light,

			3 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
			4 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			5 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tree_bl ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
			1 => new SpriteElement($col_leaves_dark, $col_leaves, '&nbsp;'),
			2 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
			4 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
			5 => new SpriteElement($col_leaves_dark, $col_leaves, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tree_br ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_dark = $this->getDetailElement($col_leaves, true);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
			1 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
			2 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),

			3 => $spe_detail_dark,

			4 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_tree_bm ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			0 => $spe_detail_light,
			1 => new SpriteElement($col_leaves, $col_leaves_dark, '&nbsp;'),
			2 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			3 => new SpriteElement($col_leaves_dark, $col_leaves, '&nbsp;'),
			4 => new SpriteElement($col_leaves_dark, $col_leaves, 'v'),
			5 => new SpriteElement($col_leaves_dark, $col_leaves, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_w ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_dark = $this->getDetailElement($col_leaves, true);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_leaves_dark, '&#x2584;'),
			1 => new SpriteElement($col_leaves, null, '&nbsp;'),
			2 => new SpriteElement($col_leaves, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
			4 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
			5 => $spe_detail_dark,
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_ew_stem ($col_leaves = null, $col_stem = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$col_stem = $this->getColour($this->col_trunk, $col_stem);
		$col_stem = tint($col_stem, -2);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, null, '&nbsp;'),
			1 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			2 => new SpriteElement($col_leaves, null, '&nbsp;'),
			3 => new SpriteElement($col_leaves_dark, $col_stem, '&#x2514;'),
			4 => new SpriteElement($col_leaves_dark, $col_stem, '&#x252c;'),
			5 => new SpriteElement($col_leaves_dark, $col_stem, '&#x2518;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_ew ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => $spe_detail_light,
			1 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			2 => new SpriteElement($col_leaves, null, '&nbsp;'),
			3 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
			4 => new SpriteElement($col_leaves_dark, $col_leaves, 'v'),
			5 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_ew_trunk ($col_leaves = null, $col_stem = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$col_stem = $this->getColour($this->col_trunk, $col_stem);
		$col_stem = tint($col_stem, -2);

		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			1 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			2 => new SpriteElement($col_leaves, null, '&nbsp;'),
			3 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
			4 => new SpriteElement($col_leaves_dark, $col_stem, 'Y'),
			5 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_e ($col_leaves = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => $spe_detail_light,
			1 => new SpriteElement($col_leaves, null, '&nbsp;'),
			2 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			3 => new SpriteElement($col_leaves_dark, $col_leaves, 'v'),
			4 => new SpriteElement($col_leaves_dark, null, '&nbsp;'),
			5 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_ns ($col_leaves = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);
//		$spe_detail_dark = $this->getDetailElement($col_leaves, true);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_leaves_dark, '&#x2590;'),
			1 => $spe_detail_light,
			2 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
			3 => new SpriteElement($col_leaves_dark, $col_leaves, 'v'),
//			3 => $spe_detail_dark,
			4 => new SpriteElement($col_leaves, null, '&nbsp;'),
			5 => new SpriteElement(null, $col_leaves, '&#x258c;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_nsew ($col_leaves = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		$spe_detail_light = $this->getDetailElement($col_leaves, false);

		return new Scenery(new Sprite([
			0 => $spe_detail_light,
			1 => new SpriteElement($col_leaves, null, '&nbsp;'),
			2 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			3 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
			4 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			5 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_n ($col_leaves = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);


		return new Scenery(new Sprite([
			0 => new SpriteElement(null, $col_leaves_dark, '&#x2584;'),
			1 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			2 => new SpriteElement(null, $col_leaves, '&#x2584;'),
			3 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x258c;'),
			4 => new SpriteElement($col_leaves, null, '&nbsp;'),
			5 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
		]), TPL_HIGHOBSTACLE);
	}

	public function scn_bush_s ($col_leaves = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $col_leaves);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);


		return new Scenery(new Sprite([
			0 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x258c;'),
			1 => new SpriteElement($col_leaves, $col_leaves_dark, 'v'),
			2 => new SpriteElement($col_leaves, null, '&nbsp;'),
			3 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
			4 => new SpriteElement($col_leaves, $col_leaves_dark, '&#x2584;'),
			5 => new SpriteElement(null, $col_leaves_dark, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	public function t_forest ($colour = null)
	{
		$col_leaves = $this->getColour($this->col_leaves, $colour);
		$col_leaves_dark = tint($col_leaves, self::TINT_LEAVES_DARK);

		return new Tile($col_leaves, ['&nbsp;', '&nbsp;', 'v'], TPL_HIGHOBSTACLE, $col_leaves_dark);
	}
}

class set_wood extends AssetSet
{
	public $colour;

	const TINT_LIGHT	= 1;
	const TINT_DARK		= -2;
	const TINT_DARKER	= -3;

	public function __construct($colour = null)
	{
		$this->colour = $colour ? $colour : '#960';
	}

	public function sprs_doubleDoors ($col_panel = null, $col_handle = null, $col_gap = null)
	{
		$col_panel = $this->getColour($this->colour, $col_panel);
		$col_handle = $col_handle ? $col_handle : '#ddd';
		$col_handle = $col_gap ? $col_gap : tint($col_panel, 2);

		$slm_doubleDoorPanel	= new SpriteElement($col_panel, null, '&nbsp;');
		$slm_doubleDoorGap		= new SpriteElement($col_panel, $col_gap, '&#x2502;');
		$slm_doubleDoorHandle	= new SpriteElement($col_panel, $col_handle, '&bull;');

		$slm_doubleDoorOpenLeft	= new SpriteElement(null, $col_panel, '&#x258C');
		$slm_doubleDoorOpenRight	= new SpriteElement(null, $col_panel, '&#x2590');

		$spr_closed = new Sprite([
			0 => $slm_doubleDoorPanel,
			1 => $slm_doubleDoorGap,
			2 => $slm_doubleDoorPanel,

			3 => $slm_doubleDoorHandle,
			4 => $slm_doubleDoorGap,
			5 => $slm_doubleDoorHandle
		]);

		$spr_open = new Sprite([
			0 => $slm_doubleDoorOpenLeft,
			2 => $slm_doubleDoorOpenRight,
			3 => $slm_doubleDoorOpenLeft,
			5 => $slm_doubleDoorOpenRight
		]);

		return [
			SPRI_CLOSED => $spr_closed,
			SPRI_OPEN => $spr_open
		];

	}

	function t_planks ($colour = null)
	{
		$colour		= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Tile($colour, array('&#x0251C;', '&#x02524;', '&#x02502;', '&#x02502;', '&#x0251C;', '&#x02524;'), TPL_OPENGROUND, $col_dark);
	}

	function t_stairs ($colour = null)
	{
		$colour		= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;', '&#x02584;'], TPL_OPENGROUND, $col_dark);
	}

	function scn_planksSide ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$colour	= tint($colour, self::TINT_DARK);

		$slm = new SpriteElement(null, $colour, '&#x2580;');

		return new Scenery(new Sprite([
			0 => $slm,
			1 => $slm,
			2 => $slm,
		]));
	}

	function scn_planksSide_post ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		$slm = new SpriteElement(null, $col_dark, '&#x2580;');

		return new Scenery(new Sprite([
			0 => $slm,
			1 => new SpriteElement($col_dark, null, '&nbsp;'),
			2 => $slm,
			4 => new SpriteElement($colour, $col_dark, '&#x02590;'),
		]), TPL_VERTICAL);
	}

	function scn_post ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			1 => new SpriteElement($colour, $col_dark, '&#x02590;'),
			4 => new SpriteElement($colour, $col_dark, '&#x02590;'),
		]), TPL_VERTICAL);
	}

	function scn_railing ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$colour	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			3 => new SpriteElement(null, $colour, '&#x2580;'),
			4 => new SpriteElement($colour,  null, '&nbsp;'),
			5 => new SpriteElement(null, $colour, '&#x2580;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_fence ($colour = null)
	{
		$colour	= $this->getColour($this->colour, $colour);
		$col_dark	= tint($colour, self::TINT_DARK);

		return new Scenery(new Sprite([
			0 => new SpriteElement(null,$col_dark, '&#x2584;'),
			1 => new SpriteElement($colour, $col_dark, '&#x2590;'),
			2 => new SpriteElement(null,$col_dark, '&#x2584;'),
			3 => new SpriteElement(null,$col_dark, '&#x2584;'),
			4 => new SpriteElement($colour, $col_dark, '&#x2590;'),
			5 => new SpriteElement(null,$col_dark, '&#x2584;'),
		]), TPL_HIGHOBSTACLE);
	}

	function scn_crate ($col_top = null)
	{
		$col_top	= $this->getColour($this->colour, $col_top);
		$col_front	= tint($col_top, self::TINT_DARK);

		$col_top_dark	= tint($col_top, -1);
		$col_front_dark	= tint($col_front, -1);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null,$col_top, '&#x2590;'),
				1 => new SpriteElement($col_top, $col_top_dark, '&#x039e;'),
				2 => new SpriteElement(null,$col_top, '&#x258c;'),
				3 => new SpriteElement(null,$col_front, '&#x2590;'),
				4 => new SpriteElement($col_front, $col_front_dark, '&#x2044;'),
				5 => new SpriteElement(null,$col_front, '&#x258c;'),
			],
		]), TPL_HIGHOBSTACLE);
	}

//	function createWoodAssets($name, $colour)
//	{
//		$colour_light = tint($colour, 1, true);
//		$colour_dark = tint($colour, -2, true);
//		$colour_vDark = tint($colour, -3, true);
//
//		$slm_post = new SpriteElement($colour, $colour_dark, '&#x02590;');
//		$slm_bridgeSide = new SpriteElement(null, $colour_dark, '&#x2580;');
//
//		$spr_planksSide = new Sprite([
//			$slm_bridgeSide, $slm_bridgeSide, $slm_bridgeSide
//		]);
//

//
//
//		return [
//			"t_{$name}_planks" => new Tile($colour_light, array('&#x0251C;', '&#x02524;', '&#x02502;', '&#x02502;', '&#x0251C;', '&#x02524;'), TPL_OPENGROUND, -2),
//
//			"t_{$name}_logWall" => new Tile($colour, ['&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;', '&#x2580;'], TPL_VERTICAL, 1),
//			"t_{$name}_logFloor" => new Tile($colour_light, ['&#x251c;', '&#x2524;', '&#x2502;', '&#x2524;', '&#x251c;', '&#x253c;'], TPL_OPENGROUND, -1),
//
//			"t_{$name}_wallTop_h" => new Tile($colour_vDark, ['&#x2580;', '&#x2580;', '&#x2580;', '&#x2584;', '&#x2584;', '&#x2584;'], TPL_HIGHOBSTACLE, 1),
//			"t_{$name}_wallTop_v" => new Tile($colour_vDark, ['&#x258c;', '&nbsp;', '&#x2590;', '&#x258c;', '&nbsp;', '&#x2590;'], TPL_HIGHOBSTACLE, 1),
//			"t_{$name}_wallTop_x" => new Tile($colour_vDark, ['/', '&OverBar;', '&#x005c;', '&#x005c;', '_', '/'], TPL_HIGHOBSTACLE, 1),
//
//			"t_{$name}_wickerRoof_l" => new Tile($colour, ['/', '/', '/', '/', '/', '/'], TPL_HIGHOBSTACLE),
//			"t_{$name}_wickerRoof_m" => new Tile($colour, ['|', '|', '|', '|', '|', '|'], TPL_HIGHOBSTACLE),
//			"t_{$name}_wickerRoof_r" => new Tile($colour, ['\\', '\\', '\\', '\\', '\\', '\\'], TPL_HIGHOBSTACLE),
//
//			"t_{$name}_tileRoof" => new Tile($colour, ['U', 'U', 'U', 'U', 'U', 'U'], TPL_HIGHOBSTACLE, -2),
//
//		];
//	}

}

class set_grass extends AssetSet
{
	public $colour;

	public function __construct($colour = null)
	{
		$this->colour = $colour ? $colour : '#071';
	}

	public function t_grass($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Tile($colour, ['v', 'V', 'w', 'W'], TPL_OPENGROUND, 1);
	}

	public function t_longGrass($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Tile($colour, ['|', '&#x2320;', '&nbsp;'], TPL_OPENGROUND, 1);
	}
}

class set_water extends AssetSet
{
	public $colour;

	public function __construct($colour = null)
	{
		$this->colour = $colour ? $colour : '#44e';
	}

	public function t_water ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);

		return new Tile($colour, ['&nbsp;','&nbsp;','~'], TPL_LOWOBSTACLE);
	}

	public function t_waterFall ($colour = null)
	{
		$colour = $this->getColour($this->colour, $colour);
		$colour = tint($colour, -3);


		return new Tile($colour, ['&nbsp;','&nbsp;','|', '!'], TPL_LOWOBSTACLE);
	}
}

class set_flowers extends AssetSet
{
	public $col_stem;

	public function __construct($col_stem = null)
	{
		$this->col_stem = $col_stem ? $col_stem : '#0a0';
	}

	public function scn_flower_1 ($col_flower = null, $col_stem = null)
	{
		$col_flower = $col_flower ? $col_flower : '#faf';

		$col_stem = $this->getColour($this->col_stem, $col_stem);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '|'),
				4 => new SpriteElement(null,$col_flower, '*'),
			],
			[
				0 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '|'),
				4 => new SpriteElement(null,$col_flower, '*'),
			],
			[
				1 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '&#x2320;'),
				5 => new SpriteElement(null,$col_flower, '*'),
			],
			[
				1 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '&#x2320;'),
				5 => new SpriteElement(null,$col_flower, '*'),
			],
		]));
	}

	public function scn_flower_2 ($col_flower = null, $col_stem = null)
	{
		$col_flower = $col_flower ? $col_flower : '#aaf';

		$col_stem = $this->getColour($this->col_stem, $col_stem);

		return new Scenery(new Sprite([
			[
				0 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '|'),
				5 => new SpriteElement(null,$col_flower, '*'),
			],
			[
				0 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_stem, '|'),
				5 => new SpriteElement(null,$col_flower, '*'),
			],
			[
				2 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '|'),
			],
			[
				2 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '|'),
			],
		]));
	}

	public function scn_flower_3 ($col_flower = null, $col_stem = null)
	{
		$col_flower = $col_flower ? $col_flower : '#fff';

		$col_stem = $this->getColour($this->col_stem, $col_stem);

		return new Scenery(new Sprite([
			[
				2 => new SpriteElement(null,$col_flower, '*'),
				4 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '|'),
			],
			[
				2 => new SpriteElement(null,$col_flower, '*'),
				4 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '|'),
			],
			[
				1 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '&#92;'),
			],
			[
				1 => new SpriteElement(null,$col_flower, '*'),
				3 => new SpriteElement(null,$col_flower, '*'),
				5 => new SpriteElement(null,$col_stem, '&#92;'),
			],
		]));
	}
}


class set_waypoint extends AssetSet
{
	public $col_tiles;
	public $col_portal;

	const TINT_DARK = -1;
	const TINT_FRONT = -2;

	public function __construct($col_tiles = null, $col_portal = null)
	{
		$this->col_tiles = $col_tiles ? $col_tiles : '#874';
		$this->col_portal = $col_portal ? $col_portal : '#0ff';
	}

	////////////////////////////////////////////
	//
	//		WAYPOINT
	//
	////////////////////////////////////////////

	public function t_wp_tl ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2554;', '&#x2550;', '&#x2550;', '&#x2551;', '&nbsp;', '&#x2554;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_t ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2550;', '&#x2550;', '&#x2550;', '&#x2550;', '&#x2550;', '&#x2550;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_tr ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2550;', '&#x2550;', '&#x2557;', '&#x2557;', '&nbsp;', '&#x2551;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_l ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2551;', '&nbsp;', '&#x2551;', '&#x2551;', '&nbsp;', '&#x2551;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_bl ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x2551;', '&nbsp;', '&#x255a;', '&#x255a;', '&#x2550;', '&#x2550;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_br ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['&#x255d;', '&nbsp;', '&#x2551;', '&#x2550;', '&#x2550;', '&#x255d;'], TPL_OPENGROUND, $col_dark);
	}

	public function t_wp_mid ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

		return new Tile($colour, ['/', '&#x203e;', '&#x005c;', '&#x005c;', '_', '/'], TPL_OPENGROUND, $col_dark);
	}

	////////////////////////////////////////////
	//
	//		CHECKPOINT
	//
	////////////////////////////////////////////

	public function t_cp ($colour = null)
	{
		$colour = $this->getColour($this->col_tiles, $colour);
		$col_dark = tint($colour, self::TINT_DARK);

//		return new Tile($colour, ['&#x2554;', '&#x2550;', '&#x2557;', '&#x255a;', '&#x2550;', '&#x255d;'], TPL_OPENGROUND, $col_dark);
		return new Tile($colour, ['&#x25b2;', '&#x25bc;', '&#x25b2;', '&#x25bc;', '&#x25b2;', '&#x25bc;'], TPL_OPENGROUND, $col_dark);
	}

	function scn_tile_side ($colour = null)
	{
		$colour	= $this->getColour($this->col_tiles, $colour);
		$colour	= tint($colour, self::TINT_FRONT);

		$slm = new SpriteElement(null, $colour, '&#x2580;');

		return new Scenery(new Sprite([
			0 => $slm,
			1 => $slm,
			2 => $slm,
		]));
	}

	public function spr_portal ($colour = null)
	{
		$colour = $this->getColour($this->col_portal, $colour);

		$slm_fs = new SpriteElement(null, $colour, '/');
		$slm_bs = new SpriteElement(null, $colour, '&#x005c;');
		$slm_rp = new SpriteElement(null, $colour, ')');
		$slm_lp = new SpriteElement(null, $colour, '(');
		$slm_b = new SpriteElement(null, $colour, '|');

		return new Sprite([
			[
				$slm_fs, $slm_rp, $slm_bs,
				$slm_bs, $slm_lp, $slm_fs
			],
			[
				$slm_fs, $slm_b, $slm_bs,
				$slm_bs, $slm_b, $slm_fs
			],
			[
				$slm_fs, $slm_lp, $slm_bs,
				$slm_bs, $slm_rp, $slm_fs
			],
			[
				$slm_fs, $slm_b, $slm_bs,
				$slm_bs, $slm_b, $slm_fs
			]
		]);
	}
}


class obj_portal extends AsObject

{
	public function __construct($name, $spriteSet, $teleport_n_offset, $teleport_w_offset, $MAP = null, $strip_DIR = null, $strip_length = null)
	{
		$this->addBehaviour(
			new obhv_teleporter($teleport_n_offset, $teleport_w_offset, $MAP)
		);

		if (isset($strip_DIR, $strip_length))
		{
			$start = 1;

			switch ($strip_DIR)
			{
				case DIR_NORTH:
					$strip_length = 0 - $strip_length;
					$start = -1;
				case DIR_SOUTH:
					for ($n_offset = $start; $n_offset < $strip_length; $n_offset ++)
					{
						$this->constituents[$n_offset][0] = new ObjectConstituent($spriteSet);
					}
					break;

				case DIR_WEST:
					$strip_length = 0 - $strip_length;
					$start = -1;
				case DIR_EAST:
					for ($w_offset = $start; $w_offset < $strip_length; $w_offset ++)
					{
						$this->constituents[0][$w_offset] = new ObjectConstituent($spriteSet);
					}
					break;
			}
		}

		parent::__construct($name, $spriteSet, LAYER_PORTAL);
	}
}



class obhv_teleporter extends ObjectBehaviour
{
	public $n_offset;
	public $w_offset;
	public $map;

	public function __construct($n_offset, $w_offset, $MAP = null)
	{
		$this->onReaction = true;

		$description = "Teleports to {$n_offset}:{$w_offset}"
		. ($MAP ? " - {$MAP}." : '.');

		$this->n_offset	= $n_offset;
		$this->w_offset	= $w_offset;
		$this->map		= $MAP;

		parent::__construct($description, BHVK_TELEPORT, 0);
	}

	public function onReaction(AsObject $instigator, $DIR)
	{
		global $view;
		global $player;

		if ($instigator === $player)
        {
			if ($this->owner->constituents)
			{
				$destination_n_offset = $player->n_offset - $this->owner->n_offset + $this->n_offset;
				$destination_w_offset = $player->w_offset - $this->owner->w_offset + $this->w_offset;

				switch ($DIR)
				{
					case DIR_NORTH:	$destination_n_offset --;
					case DIR_SOUTH:	$destination_n_offset ++;
					case DIR_WEST:	$destination_w_offset --;
					case DIR_EAST:	$destination_w_offset ++;
				}

				console_echo("<<#fff>>{$this->owner->name}<> has constituents!", '#ffa', CNS_BEHAVIOUR);
			}
			else
			{
				$destination_n_offset = $this->n_offset;
				$destination_w_offset = $this->w_offset;

				console_echo("<<#fff>>{$this->owner->name}<> has no constituents.", '#afa', CNS_BEHAVIOUR);
			}

            console_echo("Entering the {$this->owner->name} portal!");		//XXX

			$this->owner->permitEntry = false;
			$player->move($destination_n_offset, $destination_w_offset, $this->map);

            $view->forceUpdate = true;
            return false;
        }
	}
}

class obj_waypoint extends AsObject

{
	public $WP;

	public $dest_n_offset;
	public $dest_w_offset;
	public $MAP;

	public $attainable;

	public $permitEntryDefault = true;

	public function __construct($WP, $dest_n_offset, $dest_w_offset, $MAP, $attainable = false)
	{
		$this->WP = $WP;
		$this->dest_n_offset = $dest_n_offset;
		$this->dest_w_offset = $dest_w_offset;
		$this->MAP = $MAP;
		$this->attainable = $attainable;

		parent::__construct('Waypoint', [$this->getSprite()], LAYER_PORTAL);

		$this->addBehaviour(new obhv_waypoint($WP, $dest_n_offset, $dest_w_offset, $MAP, $attainable));
	}

	public function getSprite($colour = '#0ff')
	{
		$slm_fs = new SpriteElement(null, $colour, '/');
		$slm_bs = new SpriteElement(null, $colour, '&#x005c;');
		$slm_rp = new SpriteElement(null, $colour, ')');
		$slm_lp = new SpriteElement(null, $colour, '(');
		$slm_b = new SpriteElement(null, $colour, '|');

		return new Sprite([
			[
				$slm_fs, $slm_rp, $slm_bs,
				$slm_bs, $slm_lp, $slm_fs
			],
			[
				$slm_fs, $slm_b, $slm_bs,
				$slm_bs, $slm_b, $slm_fs
			],
			[
				$slm_fs, $slm_lp, $slm_bs,
				$slm_bs, $slm_rp, $slm_fs
			],
			[
				$slm_fs, $slm_b, $slm_bs,
				$slm_bs, $slm_b, $slm_fs
			]
		]);
	}
}


class obhv_waypoint extends ObjectBehaviour
{
	public $WP;

	public $n_offset;
	public $w_offset;
	public $MAP;

	public $attainable;

	public function __construct($WP, $n_offset, $w_offset, $MAP, $attainable = false)
	{
		$this->onReaction = true;
		$this->onIdle = true;

		$this->WP = $WP;
		$this->n_offset = $n_offset;
		$this->w_offset = $w_offset;
		$this->MAP = $MAP;
		$this->attainable = $attainable;

		parent::__construct('Waypoint', BHVK_TELEPORT);
	}

	public function onIdle () { global $player; $this->owner->invisible = !isset($player->WPs[$this->WP]); }

	public function onReaction(AsObject $instigator, $DIR)
	{
		global $player;
		global $view;

		if ($instigator !== $player) return true;

		console_echo("Hitting a waypoint with destination {$this->n_offset}:{$this->w_offset}:{$this->MAP}", '#fff');

		if (isset($instigator->WPs[$this->WP]))
		{
			console_echo('Player has waypoint! Let\'s go!', '#afa');

			$this->owner->permitEntry = false;
			$player->move($this->n_offset, $this->w_offset, $this->MAP);
			$view->forceUpdate = true;
			update_sound(SND_TELEPORT);
			return false;
		}
		elseif ($this->attainable)
		{
			console_echo('Player has just gotten waypoint! Let\'s go!', '#ffa');
			$player->WPs[$this->WP] = time();

			$this->owner->permitEntry = false;
			$player->move($this->n_offset, $this->w_offset, $this->MAP);
			$view->forceUpdate = true;
			update_sound(SND_TELEPORT);
			update_sound(SND_NEWWAYPOINT);
			return false;
		}
		else { console_echo('Player hasn\'t got this waypoint!', '#faa'); }
		return true;
	}
}


class obj_checkpoint extends AsObject

{
	public function __construct()
	{
		$this->addBehaviour(new obhv_checkpoint());

		$this->permitEntryDefault = true;

		parent::__construct('Checkpoint', self::getSprite(), LAYER_CHECKPOINT);
	}

	static function getSprite ($colour = '#0ff')
	{
		$slm_u = new SpriteElement(null, $colour, '&#x25b2;');
		$slm_d = new SpriteElement(null, $colour, '&#x25bc;');

		return new Sprite([
			[
				0 => $slm_u,
				5 => $slm_d,
			],
			[
				1 => $slm_d,
				4 => $slm_u,
			],
			[
				2 => $slm_u,
				3 => $slm_d,
			],
		]);
	}
}


class obhv_checkpoint extends ObjectBehaviour
{
	public function __construct()
	{
		$this->onReaction = true;
		$this->onIdle = true;
		parent::__construct('Checkpoint', null);
	}

	public function onIdle ()
	{
		global $player;

		$this->owner->invisible =
			$player->checkpoint_n_offset !== $this->owner->n_offset ||
			$player->checkpoint_w_offset !== $this->owner->w_offset ||
			$player->checkpoint_MAP !== $player->MAP;

	}

	public function onReaction(AsObject $instigator, $DIR)
	{
		global $player;

		if ($instigator !== $player) return;

		if (
			$player->checkpoint_n_offset === $this->owner->n_offset
			&& $player->checkpoint_w_offset === $this->owner->w_offset
			&& $player->checkpoint_MAP === $player->MAP
		) return;



		$player->checkpoint_n_offset	= $this->owner->n_offset;
		$player->checkpoint_w_offset	= $this->owner->w_offset;
		$player->checkpoint_MAP			= $player->MAP;

		update_thoughts('Checkpoint reached!');
		update_sound(SND_CHECKPOINT);
	}
}
